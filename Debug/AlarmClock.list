
AlarmClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000276c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800289c  0800289c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b8  080028b8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080028b8  080028b8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028b8  080028b8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080028c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000098  08002958  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08002958  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dd1  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001259  00000000  00000000  00022e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000588  00000000  00000000  000240f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000438  00000000  00000000  00024678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000019fd  00000000  00000000  00024ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002110  00000000  00000000  000264ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005d90  00000000  00000000  000285bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002e34d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000116c  00000000  00000000  0002e3c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000098 	.word	0x20000098
 800014c:	00000000 	.word	0x00000000
 8000150:	08002884 	.word	0x08002884

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000009c 	.word	0x2000009c
 800016c:	08002884 	.word	0x08002884

08000170 <ControlModule_voidInit>:

static Time_t 	StopWatch = {0,0,0};
static Date_t	Dummy_Date; // used with StopWatch when passing it to time funcs , just to verify the func's prototype!

void ControlModule_voidInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	OS_VoidCreateTask(UPDATE_TASK, 1000, ControlModule_voidUpdate, 0);
 8000174:	2300      	movs	r3, #0
 8000176:	4a0f      	ldr	r2, [pc, #60]	; (80001b4 <ControlModule_voidInit+0x44>)
 8000178:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800017c:	2001      	movs	r0, #1
 800017e:	f002 fa69 	bl	8002654 <OS_VoidCreateTask>
	OS_VoidCreateTask(UPDATE_DISPLAY_TASK, 1000, ControlModule_voidUpdateDisplay, 0);
 8000182:	2300      	movs	r3, #0
 8000184:	4a0c      	ldr	r2, [pc, #48]	; (80001b8 <ControlModule_voidInit+0x48>)
 8000186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800018a:	2002      	movs	r0, #2
 800018c:	f002 fa62 	bl	8002654 <OS_VoidCreateTask>
	OS_VoidCreateTask(UPDATE_EDIT_TASK, 40, ControlModule_voidUpdateEdit, 0);
 8000190:	2300      	movs	r3, #0
 8000192:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <ControlModule_voidInit+0x4c>)
 8000194:	2128      	movs	r1, #40	; 0x28
 8000196:	2003      	movs	r0, #3
 8000198:	f002 fa5c 	bl	8002654 <OS_VoidCreateTask>

	/*update Task is initially Active*/
	OS_VoidResumeTask(UPDATE_TASK);
 800019c:	2001      	movs	r0, #1
 800019e:	f002 fa9f 	bl	80026e0 <OS_VoidResumeTask>
	/*UpdateDisplay task is initially off*/
	OS_VoidSuspendTask(UPDATE_DISPLAY_TASK);
 80001a2:	2002      	movs	r0, #2
 80001a4:	f002 fa88 	bl	80026b8 <OS_VoidSuspendTask>
	/*UpdateEdit task is initally off*/
	OS_VoidSuspendTask(UPDATE_EDIT_TASK);
 80001a8:	2003      	movs	r0, #3
 80001aa:	f002 fa85 	bl	80026b8 <OS_VoidSuspendTask>
}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	080001c1 	.word	0x080001c1
 80001b8:	08000265 	.word	0x08000265
 80001bc:	08000205 	.word	0x08000205

080001c0 <ControlModule_voidUpdate>:

void ControlModule_voidUpdate(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	if(DisplayOrEdit == DISPLAY)
 80001c4:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <ControlModule_voidUpdate+0x3c>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d106      	bne.n	80001da <ControlModule_voidUpdate+0x1a>
	{
		OS_VoidSuspendTask(UPDATE_EDIT_TASK);
 80001cc:	2003      	movs	r0, #3
 80001ce:	f002 fa73 	bl	80026b8 <OS_VoidSuspendTask>
		OS_VoidResumeTask(UPDATE_DISPLAY_TASK);
 80001d2:	2002      	movs	r0, #2
 80001d4:	f002 fa84 	bl	80026e0 <OS_VoidResumeTask>
	{
		OS_VoidResumeTask(UPDATE_EDIT_TASK);

		u8WhatToEdit == EDIT_TIME ? OS_VoidSuspendTask(UPDATE_DISPLAY_TASK) : OS_VoidResumeTask(UPDATE_DISPLAY_TASK);
	}
}
 80001d8:	e00d      	b.n	80001f6 <ControlModule_voidUpdate+0x36>
		OS_VoidResumeTask(UPDATE_EDIT_TASK);
 80001da:	2003      	movs	r0, #3
 80001dc:	f002 fa80 	bl	80026e0 <OS_VoidResumeTask>
		u8WhatToEdit == EDIT_TIME ? OS_VoidSuspendTask(UPDATE_DISPLAY_TASK) : OS_VoidResumeTask(UPDATE_DISPLAY_TASK);
 80001e0:	4b07      	ldr	r3, [pc, #28]	; (8000200 <ControlModule_voidUpdate+0x40>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b03      	cmp	r3, #3
 80001e6:	d103      	bne.n	80001f0 <ControlModule_voidUpdate+0x30>
 80001e8:	2002      	movs	r0, #2
 80001ea:	f002 fa65 	bl	80026b8 <OS_VoidSuspendTask>
}
 80001ee:	e002      	b.n	80001f6 <ControlModule_voidUpdate+0x36>
		u8WhatToEdit == EDIT_TIME ? OS_VoidSuspendTask(UPDATE_DISPLAY_TASK) : OS_VoidResumeTask(UPDATE_DISPLAY_TASK);
 80001f0:	2002      	movs	r0, #2
 80001f2:	f002 fa75 	bl	80026e0 <OS_VoidResumeTask>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000000 	.word	0x20000000
 8000200:	20000003 	.word	0x20000003

08000204 <ControlModule_voidUpdateEdit>:

void ControlModule_voidUpdateEdit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	switch(u8WhatToEdit)
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <ControlModule_voidUpdateEdit+0x4c>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b03      	cmp	r3, #3
 800020e:	d81b      	bhi.n	8000248 <ControlModule_voidUpdateEdit+0x44>
 8000210:	a201      	add	r2, pc, #4	; (adr r2, 8000218 <ControlModule_voidUpdateEdit+0x14>)
 8000212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000216:	bf00      	nop
 8000218:	08000241 	.word	0x08000241
 800021c:	08000239 	.word	0x08000239
 8000220:	08000231 	.word	0x08000231
 8000224:	08000229 	.word	0x08000229
	{
		case EDIT_TIME :
			ControlModule_voidEditTime(&Time);
 8000228:	480a      	ldr	r0, [pc, #40]	; (8000254 <ControlModule_voidUpdateEdit+0x50>)
 800022a:	f000 fa83 	bl	8000734 <ControlModule_voidEditTime>
			break;
 800022e:	e00c      	b.n	800024a <ControlModule_voidUpdateEdit+0x46>
		case EDIT_DATE :
			ControlModule_voidEditDate(&Date);
 8000230:	4809      	ldr	r0, [pc, #36]	; (8000258 <ControlModule_voidUpdateEdit+0x54>)
 8000232:	f000 f8b1 	bl	8000398 <ControlModule_voidEditDate>
			break;
 8000236:	e008      	b.n	800024a <ControlModule_voidUpdateEdit+0x46>
		case EDIT_ALARM_TIME :
			ControlModule_voidEditTime(&(Alarm.AlarmTime));
 8000238:	4808      	ldr	r0, [pc, #32]	; (800025c <ControlModule_voidUpdateEdit+0x58>)
 800023a:	f000 fa7b 	bl	8000734 <ControlModule_voidEditTime>
			break;
 800023e:	e004      	b.n	800024a <ControlModule_voidUpdateEdit+0x46>
		case EDIT_ALARM_DATE :
			ControlModule_voidEditDate(&(Alarm.AlarmDate));
 8000240:	4807      	ldr	r0, [pc, #28]	; (8000260 <ControlModule_voidUpdateEdit+0x5c>)
 8000242:	f000 f8a9 	bl	8000398 <ControlModule_voidEditDate>
			break;
 8000246:	e000      	b.n	800024a <ControlModule_voidUpdateEdit+0x46>
		default :
			break;
 8000248:	bf00      	nop
	}
}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000003 	.word	0x20000003
 8000254:	20000008 	.word	0x20000008
 8000258:	2000000c 	.word	0x2000000c
 800025c:	20000013 	.word	0x20000013
 8000260:	20000010 	.word	0x20000010

08000264 <ControlModule_voidUpdateDisplay>:

/*sums the updates and send them to display,
 * also checks alarm and calls alarmOccured if it happended*/
void ControlModule_voidUpdateDisplay(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	/*Process Time : update or edit*/
	ControlModule_u8UpdateTime(&Time , &Date);
 800026a:	4924      	ldr	r1, [pc, #144]	; (80002fc <ControlModule_voidUpdateDisplay+0x98>)
 800026c:	4824      	ldr	r0, [pc, #144]	; (8000300 <ControlModule_voidUpdateDisplay+0x9c>)
 800026e:	f000 fb43 	bl	80008f8 <ControlModule_u8UpdateTime>
	Bool_t Activate_Alarm = ControlModule_BoolCheckAlarm(&Alarm , &Time , &Date);
 8000272:	4a22      	ldr	r2, [pc, #136]	; (80002fc <ControlModule_voidUpdateDisplay+0x98>)
 8000274:	4922      	ldr	r1, [pc, #136]	; (8000300 <ControlModule_voidUpdateDisplay+0x9c>)
 8000276:	4823      	ldr	r0, [pc, #140]	; (8000304 <ControlModule_voidUpdateDisplay+0xa0>)
 8000278:	f000 fc2c 	bl	8000ad4 <ControlModule_BoolCheckAlarm>
 800027c:	4603      	mov	r3, r0
 800027e:	71fb      	strb	r3, [r7, #7]

	if(AlarmState && Activate_Alarm)
 8000280:	4b21      	ldr	r3, [pc, #132]	; (8000308 <ControlModule_voidUpdateDisplay+0xa4>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d005      	beq.n	8000294 <ControlModule_voidUpdateDisplay+0x30>
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d002      	beq.n	8000294 <ControlModule_voidUpdateDisplay+0x30>
	{
		OS_VoidResumeTask(ACTIVATE_ALARM_TASK);
 800028e:	2004      	movs	r0, #4
 8000290:	f002 fa26 	bl	80026e0 <OS_VoidResumeTask>
	}

	if(DisplayState == DISPLAY_STOPWATCH)
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <ControlModule_voidUpdateDisplay+0xa8>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d117      	bne.n	80002cc <ControlModule_voidUpdateDisplay+0x68>
	{
		switch(u8StopWatchStates)
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <ControlModule_voidUpdateDisplay+0xac>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d00e      	beq.n	80002c2 <ControlModule_voidUpdateDisplay+0x5e>
 80002a4:	2b02      	cmp	r3, #2
 80002a6:	d002      	beq.n	80002ae <ControlModule_voidUpdateDisplay+0x4a>
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d011      	beq.n	80002d0 <ControlModule_voidUpdateDisplay+0x6c>
				break;
			case RESUME_STOPWATCH :
				ControlModule_u8UpdateTime(&StopWatch , &Dummy_Date);
				break;
			default :
				break;
 80002ac:	e011      	b.n	80002d2 <ControlModule_voidUpdateDisplay+0x6e>
				StopWatch.u8Hour = 0;
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <ControlModule_voidUpdateDisplay+0xb0>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	709a      	strb	r2, [r3, #2]
				StopWatch.u8Minute = 0;
 80002b4:	4b17      	ldr	r3, [pc, #92]	; (8000314 <ControlModule_voidUpdateDisplay+0xb0>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	705a      	strb	r2, [r3, #1]
				StopWatch.u8Second = 0;
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <ControlModule_voidUpdateDisplay+0xb0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
				break;
 80002c0:	e007      	b.n	80002d2 <ControlModule_voidUpdateDisplay+0x6e>
				ControlModule_u8UpdateTime(&StopWatch , &Dummy_Date);
 80002c2:	4915      	ldr	r1, [pc, #84]	; (8000318 <ControlModule_voidUpdateDisplay+0xb4>)
 80002c4:	4813      	ldr	r0, [pc, #76]	; (8000314 <ControlModule_voidUpdateDisplay+0xb0>)
 80002c6:	f000 fb17 	bl	80008f8 <ControlModule_u8UpdateTime>
				break;
 80002ca:	e002      	b.n	80002d2 <ControlModule_voidUpdateDisplay+0x6e>
		}
	}
 80002cc:	bf00      	nop
 80002ce:	e000      	b.n	80002d2 <ControlModule_voidUpdateDisplay+0x6e>
				break;
 80002d0:	bf00      	nop

	/*Display : update*/
	DisplayState == DISPLAY_STOPWATCH ? ControlModule_voidDisplayOptions(StopWatch , Dummy_Date) : ControlModule_voidDisplayOptions(Time , Date);
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <ControlModule_voidUpdateDisplay+0xa8>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d106      	bne.n	80002e8 <ControlModule_voidUpdateDisplay+0x84>
 80002da:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <ControlModule_voidUpdateDisplay+0xb4>)
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <ControlModule_voidUpdateDisplay+0xb0>)
 80002de:	6811      	ldr	r1, [r2, #0]
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f000 f81b 	bl	800031c <ControlModule_voidDisplayOptions>
}
 80002e6:	e005      	b.n	80002f4 <ControlModule_voidUpdateDisplay+0x90>
	DisplayState == DISPLAY_STOPWATCH ? ControlModule_voidDisplayOptions(StopWatch , Dummy_Date) : ControlModule_voidDisplayOptions(Time , Date);
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <ControlModule_voidUpdateDisplay+0x98>)
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <ControlModule_voidUpdateDisplay+0x9c>)
 80002ec:	6811      	ldr	r1, [r2, #0]
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	f000 f814 	bl	800031c <ControlModule_voidDisplayOptions>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000000c 	.word	0x2000000c
 8000300:	20000008 	.word	0x20000008
 8000304:	20000010 	.word	0x20000010
 8000308:	20000002 	.word	0x20000002
 800030c:	20000001 	.word	0x20000001
 8000310:	20000004 	.word	0x20000004
 8000314:	200000b8 	.word	0x200000b8
 8000318:	200000bc 	.word	0x200000bc

0800031c <ControlModule_voidDisplayOptions>:

static void ControlModule_voidDisplayOptions(Time_t DisplayTime , Date_t DisplayDate)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
	if(DisplayState == DISPLAY_TIME || DisplayState == DISPLAY_STOPWATCH)
 8000326:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <ControlModule_voidDisplayOptions+0x78>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b02      	cmp	r3, #2
 800032c:	d003      	beq.n	8000336 <ControlModule_voidDisplayOptions+0x1a>
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <ControlModule_voidDisplayOptions+0x78>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d115      	bne.n	8000362 <ControlModule_voidDisplayOptions+0x46>
	{
		DisplayModule_voidSetTime(DisplayTime);
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 fe3e 	bl	8000fb8 <DisplayModule_voidSetTime>

		/*Suspend Date Tasks*/
		OS_VoidSuspendTask(DISPLAY_YEARS_TASK);
 800033c:	2008      	movs	r0, #8
 800033e:	f002 f9bb 	bl	80026b8 <OS_VoidSuspendTask>
		OS_VoidSuspendTask(DISPLAY_MONTHS_TASK);
 8000342:	2009      	movs	r0, #9
 8000344:	f002 f9b8 	bl	80026b8 <OS_VoidSuspendTask>
		OS_VoidSuspendTask(DISPLAY_DAYS_TASK);
 8000348:	200a      	movs	r0, #10
 800034a:	f002 f9b5 	bl	80026b8 <OS_VoidSuspendTask>

		/*Resume Time Tasks*/
		OS_VoidResumeTask(DISPLAY_HOURS_TASK);
 800034e:	2005      	movs	r0, #5
 8000350:	f002 f9c6 	bl	80026e0 <OS_VoidResumeTask>
		OS_VoidResumeTask(DISPLAY_MINUTES_TASK);
 8000354:	2006      	movs	r0, #6
 8000356:	f002 f9c3 	bl	80026e0 <OS_VoidResumeTask>
		OS_VoidResumeTask(DISPLAY_SECONDS_TASK);
 800035a:	2007      	movs	r0, #7
 800035c:	f002 f9c0 	bl	80026e0 <OS_VoidResumeTask>
 8000360:	e014      	b.n	800038c <ControlModule_voidDisplayOptions+0x70>

	}
	else
	{
		DisplayModule_voidSetDate(DisplayDate);
 8000362:	6838      	ldr	r0, [r7, #0]
 8000364:	f000 fe3c 	bl	8000fe0 <DisplayModule_voidSetDate>

		/*Suspend Time Tasks*/
		OS_VoidSuspendTask(DISPLAY_HOURS_TASK);
 8000368:	2005      	movs	r0, #5
 800036a:	f002 f9a5 	bl	80026b8 <OS_VoidSuspendTask>
		OS_VoidSuspendTask(DISPLAY_MINUTES_TASK);
 800036e:	2006      	movs	r0, #6
 8000370:	f002 f9a2 	bl	80026b8 <OS_VoidSuspendTask>
		OS_VoidSuspendTask(DISPLAY_SECONDS_TASK);
 8000374:	2007      	movs	r0, #7
 8000376:	f002 f99f 	bl	80026b8 <OS_VoidSuspendTask>

		/*Resume Date Tasks*/
		OS_VoidResumeTask(DISPLAY_YEARS_TASK);
 800037a:	2008      	movs	r0, #8
 800037c:	f002 f9b0 	bl	80026e0 <OS_VoidResumeTask>
		OS_VoidResumeTask(DISPLAY_MONTHS_TASK);
 8000380:	2009      	movs	r0, #9
 8000382:	f002 f9ad 	bl	80026e0 <OS_VoidResumeTask>
		OS_VoidResumeTask(DISPLAY_DAYS_TASK);
 8000386:	200a      	movs	r0, #10
 8000388:	f002 f9aa 	bl	80026e0 <OS_VoidResumeTask>
	}
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000001 	.word	0x20000001

08000398 <ControlModule_voidEditDate>:

static void ControlModule_voidEditDate(Date_t* EditDate )
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	/*Suspend Time Tasks : Not to appear on SSD */
	OS_VoidSuspendTask(DISPLAY_HOURS_TASK);
 80003a0:	2005      	movs	r0, #5
 80003a2:	f002 f989 	bl	80026b8 <OS_VoidSuspendTask>
	OS_VoidSuspendTask(DISPLAY_MINUTES_TASK);
 80003a6:	2006      	movs	r0, #6
 80003a8:	f002 f986 	bl	80026b8 <OS_VoidSuspendTask>
	OS_VoidSuspendTask(DISPLAY_SECONDS_TASK);
 80003ac:	2007      	movs	r0, #7
 80003ae:	f002 f983 	bl	80026b8 <OS_VoidSuspendTask>

	static u8 u8Tog = 20;

	switch(u8EditPosition)
 80003b2:	4b35      	ldr	r3, [pc, #212]	; (8000488 <ControlModule_voidEditDate+0xf0>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d019      	beq.n	80003ee <ControlModule_voidEditDate+0x56>
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d02e      	beq.n	800041c <ControlModule_voidEditDate+0x84>
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d000      	beq.n	80003c4 <ControlModule_voidEditDate+0x2c>

			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_YEARS_TASK) : OS_VoidSuspendTask(DISPLAY_YEARS_TASK) ;

			break;
		default :
			break;
 80003c2:	e042      	b.n	800044a <ControlModule_voidEditDate+0xb2>
			ControlModule_voidEditDays(EditDate);
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f000 f8c1 	bl	800054c <ControlModule_voidEditDays>
			OS_VoidResumeTask(DISPLAY_YEARS_TASK);
 80003ca:	2008      	movs	r0, #8
 80003cc:	f002 f988 	bl	80026e0 <OS_VoidResumeTask>
			OS_VoidResumeTask(DISPLAY_MONTHS_TASK);
 80003d0:	2009      	movs	r0, #9
 80003d2:	f002 f985 	bl	80026e0 <OS_VoidResumeTask>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_DAYS_TASK) : OS_VoidSuspendTask(DISPLAY_DAYS_TASK) ;
 80003d6:	4b2d      	ldr	r3, [pc, #180]	; (800048c <ControlModule_voidEditDate+0xf4>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b09      	cmp	r3, #9
 80003dc:	d903      	bls.n	80003e6 <ControlModule_voidEditDate+0x4e>
 80003de:	200a      	movs	r0, #10
 80003e0:	f002 f97e 	bl	80026e0 <OS_VoidResumeTask>
			break;
 80003e4:	e031      	b.n	800044a <ControlModule_voidEditDate+0xb2>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_DAYS_TASK) : OS_VoidSuspendTask(DISPLAY_DAYS_TASK) ;
 80003e6:	200a      	movs	r0, #10
 80003e8:	f002 f966 	bl	80026b8 <OS_VoidSuspendTask>
			break;
 80003ec:	e02d      	b.n	800044a <ControlModule_voidEditDate+0xb2>
			ControlModule_voidEditMonths(&(EditDate->u8Month));
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3301      	adds	r3, #1
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f878 	bl	80004e8 <ControlModule_voidEditMonths>
			OS_VoidResumeTask(DISPLAY_YEARS_TASK);
 80003f8:	2008      	movs	r0, #8
 80003fa:	f002 f971 	bl	80026e0 <OS_VoidResumeTask>
			OS_VoidResumeTask(DISPLAY_DAYS_TASK);
 80003fe:	200a      	movs	r0, #10
 8000400:	f002 f96e 	bl	80026e0 <OS_VoidResumeTask>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_MONTHS_TASK) : OS_VoidSuspendTask(DISPLAY_MONTHS_TASK) ;
 8000404:	4b21      	ldr	r3, [pc, #132]	; (800048c <ControlModule_voidEditDate+0xf4>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b09      	cmp	r3, #9
 800040a:	d903      	bls.n	8000414 <ControlModule_voidEditDate+0x7c>
 800040c:	2009      	movs	r0, #9
 800040e:	f002 f967 	bl	80026e0 <OS_VoidResumeTask>
			break;
 8000412:	e01a      	b.n	800044a <ControlModule_voidEditDate+0xb2>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_MONTHS_TASK) : OS_VoidSuspendTask(DISPLAY_MONTHS_TASK) ;
 8000414:	2009      	movs	r0, #9
 8000416:	f002 f94f 	bl	80026b8 <OS_VoidSuspendTask>
			break;
 800041a:	e016      	b.n	800044a <ControlModule_voidEditDate+0xb2>
			ControlModule_voidEditYears(&(EditDate->u8Year));
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3302      	adds	r3, #2
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f835 	bl	8000490 <ControlModule_voidEditYears>
			OS_VoidResumeTask(DISPLAY_MONTHS_TASK);
 8000426:	2009      	movs	r0, #9
 8000428:	f002 f95a 	bl	80026e0 <OS_VoidResumeTask>
			OS_VoidResumeTask(DISPLAY_DAYS_TASK);
 800042c:	200a      	movs	r0, #10
 800042e:	f002 f957 	bl	80026e0 <OS_VoidResumeTask>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_YEARS_TASK) : OS_VoidSuspendTask(DISPLAY_YEARS_TASK) ;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <ControlModule_voidEditDate+0xf4>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b09      	cmp	r3, #9
 8000438:	d903      	bls.n	8000442 <ControlModule_voidEditDate+0xaa>
 800043a:	2008      	movs	r0, #8
 800043c:	f002 f950 	bl	80026e0 <OS_VoidResumeTask>
			break;
 8000440:	e002      	b.n	8000448 <ControlModule_voidEditDate+0xb0>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_YEARS_TASK) : OS_VoidSuspendTask(DISPLAY_YEARS_TASK) ;
 8000442:	2008      	movs	r0, #8
 8000444:	f002 f938 	bl	80026b8 <OS_VoidSuspendTask>
			break;
 8000448:	bf00      	nop
	}

	u8Tog--;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <ControlModule_voidEditDate+0xf4>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	3b01      	subs	r3, #1
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <ControlModule_voidEditDate+0xf4>)
 8000454:	701a      	strb	r2, [r3, #0]

	if(u8Tog == 0)
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <ControlModule_voidEditDate+0xf4>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d102      	bne.n	8000464 <ControlModule_voidEditDate+0xcc>
		u8Tog = 20;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <ControlModule_voidEditDate+0xf4>)
 8000460:	2214      	movs	r2, #20
 8000462:	701a      	strb	r2, [r3, #0]


	DisplayModule_voidSetDate(*EditDate);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	7859      	ldrb	r1, [r3, #1]
 800046a:	0209      	lsls	r1, r1, #8
 800046c:	430a      	orrs	r2, r1
 800046e:	789b      	ldrb	r3, [r3, #2]
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	431a      	orrs	r2, r3
 8000474:	2300      	movs	r3, #0
 8000476:	f362 0317 	bfi	r3, r2, #0, #24
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fdb0 	bl	8000fe0 <DisplayModule_voidSetDate>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000b4 	.word	0x200000b4
 800048c:	20000016 	.word	0x20000016

08000490 <ControlModule_voidEditYears>:

void ControlModule_voidEditYears(u8* Object)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	switch(u8EditState)
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <ControlModule_voidEditYears+0x54>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d004      	beq.n	80004aa <ControlModule_voidEditYears+0x1a>
 80004a0:	2b02      	cmp	r3, #2
 80004a2:	d009      	beq.n	80004b8 <ControlModule_voidEditYears+0x28>
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d014      	beq.n	80004d2 <ControlModule_voidEditYears+0x42>
			*Object = *Object == 0 ? 99 : (*Object - 1);
			break;
		case NONE :
			break;
		default :
			break;
 80004a8:	e014      	b.n	80004d4 <ControlModule_voidEditYears+0x44>
			*Object = *Object + 1 ;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	701a      	strb	r2, [r3, #0]
			break;
 80004b6:	e00d      	b.n	80004d4 <ControlModule_voidEditYears+0x44>
			*Object = *Object == 0 ? 99 : (*Object - 1);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d004      	beq.n	80004ca <ControlModule_voidEditYears+0x3a>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	e000      	b.n	80004cc <ControlModule_voidEditYears+0x3c>
 80004ca:	2263      	movs	r2, #99	; 0x63
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	701a      	strb	r2, [r3, #0]
			break;
 80004d0:	e000      	b.n	80004d4 <ControlModule_voidEditYears+0x44>
			break;
 80004d2:	bf00      	nop
	}
	u8EditState = NONE;
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <ControlModule_voidEditYears+0x54>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	200000b5 	.word	0x200000b5

080004e8 <ControlModule_voidEditMonths>:

void ControlModule_voidEditMonths(u8* Object)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	switch(u8EditState)
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <ControlModule_voidEditMonths+0x60>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d004      	beq.n	8000502 <ControlModule_voidEditMonths+0x1a>
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d00f      	beq.n	800051c <ControlModule_voidEditMonths+0x34>
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d01a      	beq.n	8000536 <ControlModule_voidEditMonths+0x4e>
			*Object = *Object == 1 ? 12 : (*Object - 1);
			break;
		case NONE :
			break;
		default :
			break;
 8000500:	e01a      	b.n	8000538 <ControlModule_voidEditMonths+0x50>
			*Object = *Object == 12 ? 1 : *Object + 1 ;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b0c      	cmp	r3, #12
 8000508:	d004      	beq.n	8000514 <ControlModule_voidEditMonths+0x2c>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	b2da      	uxtb	r2, r3
 8000512:	e000      	b.n	8000516 <ControlModule_voidEditMonths+0x2e>
 8000514:	2201      	movs	r2, #1
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	701a      	strb	r2, [r3, #0]
			break;
 800051a:	e00d      	b.n	8000538 <ControlModule_voidEditMonths+0x50>
			*Object = *Object == 1 ? 12 : (*Object - 1);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d004      	beq.n	800052e <ControlModule_voidEditMonths+0x46>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	e000      	b.n	8000530 <ControlModule_voidEditMonths+0x48>
 800052e:	220c      	movs	r2, #12
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	701a      	strb	r2, [r3, #0]
			break;
 8000534:	e000      	b.n	8000538 <ControlModule_voidEditMonths+0x50>
			break;
 8000536:	bf00      	nop
	}
	u8EditState = NONE;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <ControlModule_voidEditMonths+0x60>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	200000b5 	.word	0x200000b5

0800054c <ControlModule_voidEditDays>:

void ControlModule_voidEditDays(Date_t* Object)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	switch(u8EditState)
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <ControlModule_voidEditDays+0x3c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d004      	beq.n	8000566 <ControlModule_voidEditDays+0x1a>
 800055c:	2b02      	cmp	r3, #2
 800055e:	d006      	beq.n	800056e <ControlModule_voidEditDays+0x22>
 8000560:	2b00      	cmp	r3, #0
 8000562:	d008      	beq.n	8000576 <ControlModule_voidEditDays+0x2a>
			ControlModule_u8UpdateDaysDecrease(Object);
			break;
		case NONE :
			break;
		default :
			break;
 8000564:	e008      	b.n	8000578 <ControlModule_voidEditDays+0x2c>
			ControlModule_u8UpdateDaysIncrease(Object);
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f810 	bl	800058c <ControlModule_u8UpdateDaysIncrease>
			break;
 800056c:	e004      	b.n	8000578 <ControlModule_voidEditDays+0x2c>
			ControlModule_u8UpdateDaysDecrease(Object);
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f876 	bl	8000660 <ControlModule_u8UpdateDaysDecrease>
			break;
 8000574:	e000      	b.n	8000578 <ControlModule_voidEditDays+0x2c>
			break;
 8000576:	bf00      	nop
	}
	u8EditState = NONE;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <ControlModule_voidEditDays+0x3c>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200000b5 	.word	0x200000b5

0800058c <ControlModule_u8UpdateDaysIncrease>:

static void ControlModule_u8UpdateDaysIncrease(Date_t* Date_Ptr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	switch(Date_Ptr->u8Month)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	3b01      	subs	r3, #1
 800059a:	2b0b      	cmp	r3, #11
 800059c:	d85c      	bhi.n	8000658 <ControlModule_u8UpdateDaysIncrease+0xcc>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <ControlModule_u8UpdateDaysIncrease+0x18>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005d5 	.word	0x080005d5
 80005a8:	080005f3 	.word	0x080005f3
 80005ac:	080005d5 	.word	0x080005d5
 80005b0:	0800063b 	.word	0x0800063b
 80005b4:	080005d5 	.word	0x080005d5
 80005b8:	0800063b 	.word	0x0800063b
 80005bc:	080005d5 	.word	0x080005d5
 80005c0:	080005d5 	.word	0x080005d5
 80005c4:	0800063b 	.word	0x0800063b
 80005c8:	080005d5 	.word	0x080005d5
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	080005d5 	.word	0x080005d5
		case 	May :
		case 	July :
		case 	Aug :
		case 	Oct :
		case 	Dec :
			if(Date_Ptr->u8Day == 31)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b1f      	cmp	r3, #31
 80005da:	d103      	bne.n	80005e4 <ControlModule_u8UpdateDaysIncrease+0x58>
			{
				Date_Ptr->u8Day = 1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Date_Ptr->u8Day++;
			}
			break;
 80005e2:	e039      	b.n	8000658 <ControlModule_u8UpdateDaysIncrease+0xcc>
				Date_Ptr->u8Day++;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	701a      	strb	r2, [r3, #0]
			break;
 80005f0:	e032      	b.n	8000658 <ControlModule_u8UpdateDaysIncrease+0xcc>

		case Feb :
			if(ControlModule_BoolIsLeapYear(Date_Ptr))
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 fa48 	bl	8000a88 <ControlModule_BoolIsLeapYear>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d00e      	beq.n	800061c <ControlModule_u8UpdateDaysIncrease+0x90>
			{
				if(Date_Ptr->u8Day == 29)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b1d      	cmp	r3, #29
 8000604:	d103      	bne.n	800060e <ControlModule_u8UpdateDaysIncrease+0x82>
				{
					Date_Ptr->u8Day = 1;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
				else
				{
					Date_Ptr->u8Day++;
				}
			}
			break;
 800060c:	e024      	b.n	8000658 <ControlModule_u8UpdateDaysIncrease+0xcc>
					Date_Ptr->u8Day++;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	b2da      	uxtb	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	701a      	strb	r2, [r3, #0]
			break;
 800061a:	e01d      	b.n	8000658 <ControlModule_u8UpdateDaysIncrease+0xcc>
				if(Date_Ptr->u8Day == 28)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b1c      	cmp	r3, #28
 8000622:	d103      	bne.n	800062c <ControlModule_u8UpdateDaysIncrease+0xa0>
					Date_Ptr->u8Day = 1;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
			break;
 800062a:	e015      	b.n	8000658 <ControlModule_u8UpdateDaysIncrease+0xcc>
					Date_Ptr->u8Day++;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	701a      	strb	r2, [r3, #0]
			break;
 8000638:	e00e      	b.n	8000658 <ControlModule_u8UpdateDaysIncrease+0xcc>
		case Apr :
		case June :
		case Sep :
		case Nov :
			if(Date_Ptr->u8Day == 30)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b1e      	cmp	r3, #30
 8000640:	d103      	bne.n	800064a <ControlModule_u8UpdateDaysIncrease+0xbe>
			{
				Date_Ptr->u8Day = 1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Date_Ptr->u8Day++;
			}
			break;
 8000648:	e005      	b.n	8000656 <ControlModule_u8UpdateDaysIncrease+0xca>
				Date_Ptr->u8Day++;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	701a      	strb	r2, [r3, #0]
			break;
 8000656:	bf00      	nop
	}
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ControlModule_u8UpdateDaysDecrease>:

static void ControlModule_u8UpdateDaysDecrease(Date_t* Date_Ptr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	switch(Date_Ptr->u8Month)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	785b      	ldrb	r3, [r3, #1]
 800066c:	3b01      	subs	r3, #1
 800066e:	2b0b      	cmp	r3, #11
 8000670:	d85c      	bhi.n	800072c <ControlModule_u8UpdateDaysDecrease+0xcc>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <ControlModule_u8UpdateDaysDecrease+0x18>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	080006a9 	.word	0x080006a9
 800067c:	080006c7 	.word	0x080006c7
 8000680:	080006a9 	.word	0x080006a9
 8000684:	0800070f 	.word	0x0800070f
 8000688:	080006a9 	.word	0x080006a9
 800068c:	0800070f 	.word	0x0800070f
 8000690:	080006a9 	.word	0x080006a9
 8000694:	080006a9 	.word	0x080006a9
 8000698:	0800070f 	.word	0x0800070f
 800069c:	080006a9 	.word	0x080006a9
 80006a0:	0800070f 	.word	0x0800070f
 80006a4:	080006a9 	.word	0x080006a9
		case 	May :
		case 	July :
		case 	Aug :
		case 	Oct :
		case 	Dec :
			if(Date_Ptr->u8Day == 1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d103      	bne.n	80006b8 <ControlModule_u8UpdateDaysDecrease+0x58>
			{
				Date_Ptr->u8Day = 31;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	221f      	movs	r2, #31
 80006b4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Date_Ptr->u8Day--;
			}
			break;
 80006b6:	e039      	b.n	800072c <ControlModule_u8UpdateDaysDecrease+0xcc>
				Date_Ptr->u8Day--;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	701a      	strb	r2, [r3, #0]
			break;
 80006c4:	e032      	b.n	800072c <ControlModule_u8UpdateDaysDecrease+0xcc>

		case Feb :
			if(ControlModule_BoolIsLeapYear(Date_Ptr))
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f9de 	bl	8000a88 <ControlModule_BoolIsLeapYear>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <ControlModule_u8UpdateDaysDecrease+0x90>
			{
				if(Date_Ptr->u8Day == 1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d103      	bne.n	80006e2 <ControlModule_u8UpdateDaysDecrease+0x82>
				{
					Date_Ptr->u8Day = 29;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	221d      	movs	r2, #29
 80006de:	701a      	strb	r2, [r3, #0]
				else
				{
					Date_Ptr->u8Day--;
				}
			}
			break;
 80006e0:	e024      	b.n	800072c <ControlModule_u8UpdateDaysDecrease+0xcc>
					Date_Ptr->u8Day--;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	701a      	strb	r2, [r3, #0]
			break;
 80006ee:	e01d      	b.n	800072c <ControlModule_u8UpdateDaysDecrease+0xcc>
				if(Date_Ptr->u8Day == 1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d103      	bne.n	8000700 <ControlModule_u8UpdateDaysDecrease+0xa0>
					Date_Ptr->u8Day = 28;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	221c      	movs	r2, #28
 80006fc:	701a      	strb	r2, [r3, #0]
			break;
 80006fe:	e015      	b.n	800072c <ControlModule_u8UpdateDaysDecrease+0xcc>
					Date_Ptr->u8Day--;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	b2da      	uxtb	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	701a      	strb	r2, [r3, #0]
			break;
 800070c:	e00e      	b.n	800072c <ControlModule_u8UpdateDaysDecrease+0xcc>
		case Apr :
		case June :
		case Sep :
		case Nov :
			if(Date_Ptr->u8Day == 1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d103      	bne.n	800071e <ControlModule_u8UpdateDaysDecrease+0xbe>
			{
				Date_Ptr->u8Day = 30;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	221e      	movs	r2, #30
 800071a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Date_Ptr->u8Day--;
			}
			break;
 800071c:	e005      	b.n	800072a <ControlModule_u8UpdateDaysDecrease+0xca>
				Date_Ptr->u8Day--;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3b01      	subs	r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	701a      	strb	r2, [r3, #0]
			break;
 800072a:	bf00      	nop
	}
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <ControlModule_voidEditTime>:

static void ControlModule_voidEditTime(Time_t* EditTime )
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	/*Suspend Date Tasks*/
	OS_VoidSuspendTask(DISPLAY_YEARS_TASK);
 800073c:	2008      	movs	r0, #8
 800073e:	f001 ffbb 	bl	80026b8 <OS_VoidSuspendTask>
	OS_VoidSuspendTask(DISPLAY_MONTHS_TASK);
 8000742:	2009      	movs	r0, #9
 8000744:	f001 ffb8 	bl	80026b8 <OS_VoidSuspendTask>
	OS_VoidSuspendTask(DISPLAY_DAYS_TASK);
 8000748:	200a      	movs	r0, #10
 800074a:	f001 ffb5 	bl	80026b8 <OS_VoidSuspendTask>

	static u8 u8Tog = 20;

	switch(u8EditPosition)
 800074e:	4b36      	ldr	r3, [pc, #216]	; (8000828 <ControlModule_voidEditTime+0xf4>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d01a      	beq.n	800078c <ControlModule_voidEditTime+0x58>
 8000756:	2b03      	cmp	r3, #3
 8000758:	d02f      	beq.n	80007ba <ControlModule_voidEditTime+0x86>
 800075a:	2b01      	cmp	r3, #1
 800075c:	d000      	beq.n	8000760 <ControlModule_voidEditTime+0x2c>

			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_HOURS_TASK) : OS_VoidSuspendTask(DISPLAY_HOURS_TASK) ;

			break;
		default :
			break;
 800075e:	e043      	b.n	80007e8 <ControlModule_voidEditTime+0xb4>
			ControlModule_voidEditSecondsMinutes(&(EditTime->u8Second));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f864 	bl	8000830 <ControlModule_voidEditSecondsMinutes>
			OS_VoidResumeTask(DISPLAY_HOURS_TASK);
 8000768:	2005      	movs	r0, #5
 800076a:	f001 ffb9 	bl	80026e0 <OS_VoidResumeTask>
			OS_VoidResumeTask(DISPLAY_MINUTES_TASK);
 800076e:	2006      	movs	r0, #6
 8000770:	f001 ffb6 	bl	80026e0 <OS_VoidResumeTask>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_SECONDS_TASK) : OS_VoidSuspendTask(DISPLAY_SECONDS_TASK) ;
 8000774:	4b2d      	ldr	r3, [pc, #180]	; (800082c <ControlModule_voidEditTime+0xf8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b09      	cmp	r3, #9
 800077a:	d903      	bls.n	8000784 <ControlModule_voidEditTime+0x50>
 800077c:	2007      	movs	r0, #7
 800077e:	f001 ffaf 	bl	80026e0 <OS_VoidResumeTask>
			break;
 8000782:	e031      	b.n	80007e8 <ControlModule_voidEditTime+0xb4>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_SECONDS_TASK) : OS_VoidSuspendTask(DISPLAY_SECONDS_TASK) ;
 8000784:	2007      	movs	r0, #7
 8000786:	f001 ff97 	bl	80026b8 <OS_VoidSuspendTask>
			break;
 800078a:	e02d      	b.n	80007e8 <ControlModule_voidEditTime+0xb4>
			ControlModule_voidEditSecondsMinutes(&(EditTime->u8Minute));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3301      	adds	r3, #1
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f84d 	bl	8000830 <ControlModule_voidEditSecondsMinutes>
			OS_VoidResumeTask(DISPLAY_HOURS_TASK);
 8000796:	2005      	movs	r0, #5
 8000798:	f001 ffa2 	bl	80026e0 <OS_VoidResumeTask>
			OS_VoidResumeTask(DISPLAY_SECONDS_TASK);
 800079c:	2007      	movs	r0, #7
 800079e:	f001 ff9f 	bl	80026e0 <OS_VoidResumeTask>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_MINUTES_TASK) : OS_VoidSuspendTask(DISPLAY_MINUTES_TASK) ;
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <ControlModule_voidEditTime+0xf8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b09      	cmp	r3, #9
 80007a8:	d903      	bls.n	80007b2 <ControlModule_voidEditTime+0x7e>
 80007aa:	2006      	movs	r0, #6
 80007ac:	f001 ff98 	bl	80026e0 <OS_VoidResumeTask>
			break;
 80007b0:	e01a      	b.n	80007e8 <ControlModule_voidEditTime+0xb4>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_MINUTES_TASK) : OS_VoidSuspendTask(DISPLAY_MINUTES_TASK) ;
 80007b2:	2006      	movs	r0, #6
 80007b4:	f001 ff80 	bl	80026b8 <OS_VoidSuspendTask>
			break;
 80007b8:	e016      	b.n	80007e8 <ControlModule_voidEditTime+0xb4>
			ControlModule_voidEditHours(&(EditTime->u8Hour));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3302      	adds	r3, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f868 	bl	8000894 <ControlModule_voidEditHours>
			OS_VoidResumeTask(DISPLAY_SECONDS_TASK);
 80007c4:	2007      	movs	r0, #7
 80007c6:	f001 ff8b 	bl	80026e0 <OS_VoidResumeTask>
			OS_VoidResumeTask(DISPLAY_MINUTES_TASK);
 80007ca:	2006      	movs	r0, #6
 80007cc:	f001 ff88 	bl	80026e0 <OS_VoidResumeTask>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_HOURS_TASK) : OS_VoidSuspendTask(DISPLAY_HOURS_TASK) ;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <ControlModule_voidEditTime+0xf8>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b09      	cmp	r3, #9
 80007d6:	d903      	bls.n	80007e0 <ControlModule_voidEditTime+0xac>
 80007d8:	2005      	movs	r0, #5
 80007da:	f001 ff81 	bl	80026e0 <OS_VoidResumeTask>
			break;
 80007de:	e002      	b.n	80007e6 <ControlModule_voidEditTime+0xb2>
			u8Tog >= 10 ? OS_VoidResumeTask(DISPLAY_HOURS_TASK) : OS_VoidSuspendTask(DISPLAY_HOURS_TASK) ;
 80007e0:	2005      	movs	r0, #5
 80007e2:	f001 ff69 	bl	80026b8 <OS_VoidSuspendTask>
			break;
 80007e6:	bf00      	nop
	}

	u8Tog--;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <ControlModule_voidEditTime+0xf8>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <ControlModule_voidEditTime+0xf8>)
 80007f2:	701a      	strb	r2, [r3, #0]

	if(u8Tog == 0)
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <ControlModule_voidEditTime+0xf8>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <ControlModule_voidEditTime+0xce>
		u8Tog = 20;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <ControlModule_voidEditTime+0xf8>)
 80007fe:	2214      	movs	r2, #20
 8000800:	701a      	strb	r2, [r3, #0]

	DisplayModule_voidSetTime(*EditTime);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	7859      	ldrb	r1, [r3, #1]
 8000808:	0209      	lsls	r1, r1, #8
 800080a:	430a      	orrs	r2, r1
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	431a      	orrs	r2, r3
 8000812:	2300      	movs	r3, #0
 8000814:	f362 0317 	bfi	r3, r2, #0, #24
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fbcd 	bl	8000fb8 <DisplayModule_voidSetTime>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000b4 	.word	0x200000b4
 800082c:	20000017 	.word	0x20000017

08000830 <ControlModule_voidEditSecondsMinutes>:

void ControlModule_voidEditSecondsMinutes(u8* Object)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	switch(u8EditState)
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <ControlModule_voidEditSecondsMinutes+0x60>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d004      	beq.n	800084a <ControlModule_voidEditSecondsMinutes+0x1a>
 8000840:	2b02      	cmp	r3, #2
 8000842:	d00f      	beq.n	8000864 <ControlModule_voidEditSecondsMinutes+0x34>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d01a      	beq.n	800087e <ControlModule_voidEditSecondsMinutes+0x4e>
			*Object = *Object == 0 ? 59 : (*Object - 1);
			break;
		case NONE :
			break;
		default :
			break;
 8000848:	e01a      	b.n	8000880 <ControlModule_voidEditSecondsMinutes+0x50>
			*Object = *Object == 59 ? 0 : (*Object + 1);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b3b      	cmp	r3, #59	; 0x3b
 8000850:	d004      	beq.n	800085c <ControlModule_voidEditSecondsMinutes+0x2c>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	e000      	b.n	800085e <ControlModule_voidEditSecondsMinutes+0x2e>
 800085c:	2200      	movs	r2, #0
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	701a      	strb	r2, [r3, #0]
			break;
 8000862:	e00d      	b.n	8000880 <ControlModule_voidEditSecondsMinutes+0x50>
			*Object = *Object == 0 ? 59 : (*Object - 1);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d004      	beq.n	8000876 <ControlModule_voidEditSecondsMinutes+0x46>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3b01      	subs	r3, #1
 8000872:	b2da      	uxtb	r2, r3
 8000874:	e000      	b.n	8000878 <ControlModule_voidEditSecondsMinutes+0x48>
 8000876:	223b      	movs	r2, #59	; 0x3b
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	701a      	strb	r2, [r3, #0]
			break;
 800087c:	e000      	b.n	8000880 <ControlModule_voidEditSecondsMinutes+0x50>
			break;
 800087e:	bf00      	nop
	}
	u8EditState = NONE;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <ControlModule_voidEditSecondsMinutes+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	200000b5 	.word	0x200000b5

08000894 <ControlModule_voidEditHours>:

void ControlModule_voidEditHours(u8* Object)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	switch(u8EditState)
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <ControlModule_voidEditHours+0x60>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d004      	beq.n	80008ae <ControlModule_voidEditHours+0x1a>
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d00f      	beq.n	80008c8 <ControlModule_voidEditHours+0x34>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d01a      	beq.n	80008e2 <ControlModule_voidEditHours+0x4e>
			*Object = *Object == 1 ? 12 : (*Object - 1);
			break;
		case NONE :
			break;
		default :
			break;
 80008ac:	e01a      	b.n	80008e4 <ControlModule_voidEditHours+0x50>
			*Object = *Object == 12 ? 1 : (*Object + 1);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b0c      	cmp	r3, #12
 80008b4:	d004      	beq.n	80008c0 <ControlModule_voidEditHours+0x2c>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	e000      	b.n	80008c2 <ControlModule_voidEditHours+0x2e>
 80008c0:	2201      	movs	r2, #1
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	701a      	strb	r2, [r3, #0]
			break;
 80008c6:	e00d      	b.n	80008e4 <ControlModule_voidEditHours+0x50>
			*Object = *Object == 1 ? 12 : (*Object - 1);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d004      	beq.n	80008da <ControlModule_voidEditHours+0x46>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	e000      	b.n	80008dc <ControlModule_voidEditHours+0x48>
 80008da:	220c      	movs	r2, #12
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	701a      	strb	r2, [r3, #0]
			break;
 80008e0:	e000      	b.n	80008e4 <ControlModule_voidEditHours+0x50>
			break;
 80008e2:	bf00      	nop
	}
	u8EditState = NONE;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ControlModule_voidEditHours+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	200000b5 	.word	0x200000b5

080008f8 <ControlModule_u8UpdateTime>:

static void ControlModule_u8UpdateTime(Time_t* Time_Ptr , Date_t* Date_Ptr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	if(Time_Ptr->u8Second == 59)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b3b      	cmp	r3, #59	; 0x3b
 8000908:	d12a      	bne.n	8000960 <ControlModule_u8UpdateTime+0x68>
	{
		Time_Ptr->u8Second = 0;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
		if(Time_Ptr->u8Minute == 59)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	2b3b      	cmp	r3, #59	; 0x3b
 8000916:	d11c      	bne.n	8000952 <ControlModule_u8UpdateTime+0x5a>
		{
			Time_Ptr->u8Minute = 0;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	705a      	strb	r2, [r3, #1]
			if(Time_Ptr->u8Hour == 11)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	2b0b      	cmp	r3, #11
 8000924:	d106      	bne.n	8000934 <ControlModule_u8UpdateTime+0x3c>
			{
				Time_Ptr->u8Hour = 12;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	220c      	movs	r2, #12
 800092a:	709a      	strb	r2, [r3, #2]
				ControlModule_u8UpdateDate(Date_Ptr);
 800092c:	6838      	ldr	r0, [r7, #0]
 800092e:	f000 f821 	bl	8000974 <ControlModule_u8UpdateDate>
	}
	else
	{
		Time_Ptr->u8Second++;
	}
}
 8000932:	e01b      	b.n	800096c <ControlModule_u8UpdateTime+0x74>
			else if(Time_Ptr->u8Hour == 12)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	2b0c      	cmp	r3, #12
 800093a:	d103      	bne.n	8000944 <ControlModule_u8UpdateTime+0x4c>
				Time_Ptr->u8Hour = 1;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2201      	movs	r2, #1
 8000940:	709a      	strb	r2, [r3, #2]
}
 8000942:	e013      	b.n	800096c <ControlModule_u8UpdateTime+0x74>
				Time_Ptr->u8Hour++;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	3301      	adds	r3, #1
 800094a:	b2da      	uxtb	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	709a      	strb	r2, [r3, #2]
}
 8000950:	e00c      	b.n	800096c <ControlModule_u8UpdateTime+0x74>
			Time_Ptr->u8Minute++;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	3301      	adds	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	705a      	strb	r2, [r3, #1]
}
 800095e:	e005      	b.n	800096c <ControlModule_u8UpdateTime+0x74>
		Time_Ptr->u8Second++;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	701a      	strb	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <ControlModule_u8UpdateDate>:

static void ControlModule_u8UpdateDate(Date_t* Date_Ptr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	switch(Date_Ptr->u8Month)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	3b01      	subs	r3, #1
 8000982:	2b0b      	cmp	r3, #11
 8000984:	d87c      	bhi.n	8000a80 <ControlModule_u8UpdateDate+0x10c>
 8000986:	a201      	add	r2, pc, #4	; (adr r2, 800098c <ControlModule_u8UpdateDate+0x18>)
 8000988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098c:	080009bd 	.word	0x080009bd
 8000990:	08000a03 	.word	0x08000a03
 8000994:	080009bd 	.word	0x080009bd
 8000998:	08000a57 	.word	0x08000a57
 800099c:	080009bd 	.word	0x080009bd
 80009a0:	08000a57 	.word	0x08000a57
 80009a4:	080009bd 	.word	0x080009bd
 80009a8:	080009bd 	.word	0x080009bd
 80009ac:	08000a57 	.word	0x08000a57
 80009b0:	080009bd 	.word	0x080009bd
 80009b4:	08000a57 	.word	0x08000a57
 80009b8:	080009bd 	.word	0x080009bd
		case 	May :
		case 	July :
		case 	Aug :
		case 	Oct :
		case 	Dec :
			if(Date_Ptr->u8Day == 31)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b1f      	cmp	r3, #31
 80009c2:	d117      	bne.n	80009f4 <ControlModule_u8UpdateDate+0x80>
			{
				if(Date_Ptr->u8Month == Dec)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b0c      	cmp	r3, #12
 80009ca:	d109      	bne.n	80009e0 <ControlModule_u8UpdateDate+0x6c>
				{
					Date_Ptr->u8Month = Jan;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2201      	movs	r2, #1
 80009d0:	705a      	strb	r2, [r3, #1]
					Date_Ptr->u8Year++;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	789b      	ldrb	r3, [r3, #2]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	709a      	strb	r2, [r3, #2]
 80009de:	e005      	b.n	80009ec <ControlModule_u8UpdateDate+0x78>
				}
				else
				{
					Date_Ptr->u8Month++;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	3301      	adds	r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	705a      	strb	r2, [r3, #1]
				}
				Date_Ptr->u8Day = 1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Date_Ptr->u8Day++;
			}
			break;
 80009f2:	e045      	b.n	8000a80 <ControlModule_u8UpdateDate+0x10c>
				Date_Ptr->u8Day++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	701a      	strb	r2, [r3, #0]
			break;
 8000a00:	e03e      	b.n	8000a80 <ControlModule_u8UpdateDate+0x10c>

		case Feb :
			if(ControlModule_BoolIsLeapYear(Date_Ptr))
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f840 	bl	8000a88 <ControlModule_BoolIsLeapYear>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d011      	beq.n	8000a32 <ControlModule_u8UpdateDate+0xbe>
			{
				if(Date_Ptr->u8Day == 29)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b1d      	cmp	r3, #29
 8000a14:	d106      	bne.n	8000a24 <ControlModule_u8UpdateDate+0xb0>
				{
					Date_Ptr->u8Month = Mar;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2203      	movs	r2, #3
 8000a1a:	705a      	strb	r2, [r3, #1]
					Date_Ptr->u8Day = 1;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
				else
				{
					Date_Ptr->u8Day++;
				}
			}
			break;
 8000a22:	e02d      	b.n	8000a80 <ControlModule_u8UpdateDate+0x10c>
					Date_Ptr->u8Day++;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	701a      	strb	r2, [r3, #0]
			break;
 8000a30:	e026      	b.n	8000a80 <ControlModule_u8UpdateDate+0x10c>
				if(Date_Ptr->u8Day == 28)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b1c      	cmp	r3, #28
 8000a38:	d106      	bne.n	8000a48 <ControlModule_u8UpdateDate+0xd4>
					Date_Ptr->u8Month = Mar;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	705a      	strb	r2, [r3, #1]
					Date_Ptr->u8Day = 1;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
			break;
 8000a46:	e01b      	b.n	8000a80 <ControlModule_u8UpdateDate+0x10c>
					Date_Ptr->u8Day++;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	701a      	strb	r2, [r3, #0]
			break;
 8000a54:	e014      	b.n	8000a80 <ControlModule_u8UpdateDate+0x10c>

		case Apr :
		case June :
		case Sep :
		case Nov :
			if(Date_Ptr->u8Day == 30)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b1e      	cmp	r3, #30
 8000a5c:	d109      	bne.n	8000a72 <ControlModule_u8UpdateDate+0xfe>
			{
				Date_Ptr->u8Month++;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	785b      	ldrb	r3, [r3, #1]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	705a      	strb	r2, [r3, #1]
				Date_Ptr->u8Day = 1;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				Date_Ptr->u8Day++;
			}
			break;
 8000a70:	e005      	b.n	8000a7e <ControlModule_u8UpdateDate+0x10a>
				Date_Ptr->u8Day++;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	701a      	strb	r2, [r3, #0]
			break;
 8000a7e:	bf00      	nop
	}

}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <ControlModule_BoolIsLeapYear>:

static Bool_t ControlModule_BoolIsLeapYear(Date_t* Date_Ptr)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(Date_Ptr->u8Year % 400 == 0 || Date_Ptr->u8Year % 4 == 0)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <ControlModule_BoolIsLeapYear+0x48>)
 8000a98:	fb83 1302 	smull	r1, r3, r3, r2
 8000a9c:	11d9      	asrs	r1, r3, #7
 8000a9e:	17d3      	asrs	r3, r2, #31
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000aa6:	fb01 f303 	mul.w	r3, r1, r3
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d006      	beq.n	8000abe <ControlModule_BoolIsLeapYear+0x36>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <ControlModule_BoolIsLeapYear+0x3a>
	{
		return True;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <ControlModule_BoolIsLeapYear+0x3c>
	}
	else
	{
		return False;
 8000ac2:	2300      	movs	r3, #0
	}
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	51eb851f 	.word	0x51eb851f

08000ad4 <ControlModule_BoolCheckAlarm>:

static Bool_t ControlModule_BoolCheckAlarm(Alarm_t* Alarm_Ptr , Time_t* Time_Ptr , Date_t* Date_Ptr)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
	if(((Alarm_Ptr->AlarmDate.u8Day    == Date_Ptr->u8Day   ) &&
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d11f      	bne.n	8000b2c <ControlModule_BoolCheckAlarm+0x58>
	    (Alarm_Ptr->AlarmDate.u8Month  == Date_Ptr->u8Month ) &&
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	785a      	ldrb	r2, [r3, #1]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	785b      	ldrb	r3, [r3, #1]
	if(((Alarm_Ptr->AlarmDate.u8Day    == Date_Ptr->u8Day   ) &&
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d119      	bne.n	8000b2c <ControlModule_BoolCheckAlarm+0x58>
	    (Alarm_Ptr->AlarmDate.u8Year   == Date_Ptr->u8Year  ))&&
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	789a      	ldrb	r2, [r3, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	789b      	ldrb	r3, [r3, #2]
	    (Alarm_Ptr->AlarmDate.u8Month  == Date_Ptr->u8Month ) &&
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d113      	bne.n	8000b2c <ControlModule_BoolCheckAlarm+0x58>
	    ((Alarm_Ptr->AlarmTime.u8Hour  == Time_Ptr->u8Hour  ) &&
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	795a      	ldrb	r2, [r3, #5]
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	789b      	ldrb	r3, [r3, #2]
	    (Alarm_Ptr->AlarmDate.u8Year   == Date_Ptr->u8Year  ))&&
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d10d      	bne.n	8000b2c <ControlModule_BoolCheckAlarm+0x58>
	    (Alarm_Ptr->AlarmTime.u8Minute == Time_Ptr->u8Minute) &&
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	791a      	ldrb	r2, [r3, #4]
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	785b      	ldrb	r3, [r3, #1]
	    ((Alarm_Ptr->AlarmTime.u8Hour  == Time_Ptr->u8Hour  ) &&
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d107      	bne.n	8000b2c <ControlModule_BoolCheckAlarm+0x58>
	    (Alarm_Ptr->AlarmTime.u8Second == Time_Ptr->u8Second)))
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	78da      	ldrb	r2, [r3, #3]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
	    (Alarm_Ptr->AlarmTime.u8Minute == Time_Ptr->u8Minute) &&
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d101      	bne.n	8000b2c <ControlModule_BoolCheckAlarm+0x58>
	{
		return True;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <ControlModule_BoolCheckAlarm+0x5a>
	}
	else
	{
		return False;
 8000b2c:	2300      	movs	r3, #0
	}
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <ControlModule_voidSetAlarmState>:

void ControlModule_voidSetAlarmState(ToggleState_t localAlarmState)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	AlarmState = localAlarmState;
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <ControlModule_voidSetAlarmState+0x2c>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	7013      	strb	r3, [r2, #0]

	if(AlarmState == ALARM_ON)
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <ControlModule_voidSetAlarmState+0x2c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d102      	bne.n	8000b56 <ControlModule_voidSetAlarmState+0x1e>
	{
		StatusModule_voidAlarmOn();
 8000b50:	f000 fc60 	bl	8001414 <StatusModule_voidAlarmOn>
	}
	else
	{
		StatusModule_voidAlarmOff();
	}
}
 8000b54:	e001      	b.n	8000b5a <ControlModule_voidSetAlarmState+0x22>
		StatusModule_voidAlarmOff();
 8000b56:	f000 fc64 	bl	8001422 <StatusModule_voidAlarmOff>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000002 	.word	0x20000002

08000b68 <ControlModule_voidSetDisplayState>:

void ControlModule_voidSetDisplayState(u8 u8localDisplayState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	DisplayState = u8localDisplayState;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <ControlModule_voidSetDisplayState+0x1c>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	7013      	strb	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000001 	.word	0x20000001

08000b88 <ControlModule_voidSetDisplayOrEdit>:

void ControlModule_voidSetDisplayOrEdit(ToggleState_t localDisplayOrEdit)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	DisplayOrEdit = localDisplayOrEdit;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <ControlModule_voidSetDisplayOrEdit+0x1c>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	7013      	strb	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <ControlModule_voidSetEditState>:

void ControlModule_voidSetEditState  (u8 u8localEditState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	u8EditState = u8localEditState;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <ControlModule_voidSetEditState+0x1c>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	7013      	strb	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200000b5 	.word	0x200000b5

08000bc8 <ControlModule_voidSetEditPosition>:

void ControlModule_voidSetEditPosition  (u8 u8localEditPosition)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	u8EditPosition = u8localEditPosition;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <ControlModule_voidSetEditPosition+0x1c>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	7013      	strb	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000b4 	.word	0x200000b4

08000be8 <ControlModule_voidSetWhatToEdit>:

void ControlModule_voidSetWhatToEdit  (u8 u8localWhatToEdit)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	u8WhatToEdit = u8localWhatToEdit;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <ControlModule_voidSetWhatToEdit+0x1c>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	7013      	strb	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000003 	.word	0x20000003

08000c08 <ControlModule_voidSetStopWatchState>:

void ControlModule_voidSetStopWatchState  (u8 u8localStopWatchState)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	u8StopWatchStates = u8localStopWatchState;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <ControlModule_voidSetStopWatchState+0x1c>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	7013      	strb	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000004 	.word	0x20000004

08000c28 <DispalyModule_voidInit>:

static Time_t TimeDisplay;
static Date_t DateDisplay;

void DispalyModule_voidInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	TimeDisplay.u8Hour = 0;
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <DispalyModule_voidInit+0x8c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	709a      	strb	r2, [r3, #2]
	TimeDisplay.u8Minute = 0;
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <DispalyModule_voidInit+0x8c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	705a      	strb	r2, [r3, #1]
	TimeDisplay.u8Second = 0;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <DispalyModule_voidInit+0x8c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]

	SSD_Init();
 8000c3e:	f000 fd31 	bl	80016a4 <SSD_Init>

	OS_VoidCreateTask(DISPLAY_HOURS_TASK, 9, DisplayModule_voidDisplayHours, 0);
 8000c42:	2300      	movs	r3, #0
 8000c44:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <DispalyModule_voidInit+0x90>)
 8000c46:	2109      	movs	r1, #9
 8000c48:	2005      	movs	r0, #5
 8000c4a:	f001 fd03 	bl	8002654 <OS_VoidCreateTask>
	OS_VoidCreateTask(DISPLAY_MINUTES_TASK, 9, DisplayModule_voidDisplayMinutes, 2);
 8000c4e:	2302      	movs	r3, #2
 8000c50:	4a1a      	ldr	r2, [pc, #104]	; (8000cbc <DispalyModule_voidInit+0x94>)
 8000c52:	2109      	movs	r1, #9
 8000c54:	2006      	movs	r0, #6
 8000c56:	f001 fcfd 	bl	8002654 <OS_VoidCreateTask>
	OS_VoidCreateTask(DISPLAY_SECONDS_TASK, 9, DisplayModule_voidDisplaySeconds, 4);
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <DispalyModule_voidInit+0x98>)
 8000c5e:	2109      	movs	r1, #9
 8000c60:	2007      	movs	r0, #7
 8000c62:	f001 fcf7 	bl	8002654 <OS_VoidCreateTask>

	OS_VoidCreateTask(DISPLAY_YEARS_TASK, 9, DisplayModule_voidDisplayYears, 0);
 8000c66:	2300      	movs	r3, #0
 8000c68:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <DispalyModule_voidInit+0x9c>)
 8000c6a:	2109      	movs	r1, #9
 8000c6c:	2008      	movs	r0, #8
 8000c6e:	f001 fcf1 	bl	8002654 <OS_VoidCreateTask>
	OS_VoidCreateTask(DISPLAY_MONTHS_TASK, 9, DisplayModule_voidDisplayMonths, 5);
 8000c72:	2305      	movs	r3, #5
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <DispalyModule_voidInit+0xa0>)
 8000c76:	2109      	movs	r1, #9
 8000c78:	2009      	movs	r0, #9
 8000c7a:	f001 fceb 	bl	8002654 <OS_VoidCreateTask>
	OS_VoidCreateTask(DISPLAY_DAYS_TASK, 9,DisplayModule_voidDisplayDays, 2);
 8000c7e:	2302      	movs	r3, #2
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <DispalyModule_voidInit+0xa4>)
 8000c82:	2109      	movs	r1, #9
 8000c84:	200a      	movs	r0, #10
 8000c86:	f001 fce5 	bl	8002654 <OS_VoidCreateTask>

	/*Display Time is initially off*/
	OS_VoidSuspendTask(DISPLAY_HOURS_TASK);
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	f001 fd14 	bl	80026b8 <OS_VoidSuspendTask>
	OS_VoidSuspendTask(DISPLAY_MINUTES_TASK);
 8000c90:	2006      	movs	r0, #6
 8000c92:	f001 fd11 	bl	80026b8 <OS_VoidSuspendTask>
	OS_VoidSuspendTask(DISPLAY_SECONDS_TASK);
 8000c96:	2007      	movs	r0, #7
 8000c98:	f001 fd0e 	bl	80026b8 <OS_VoidSuspendTask>

	/*Display Date is initially off*/
	OS_VoidSuspendTask(DISPLAY_YEARS_TASK);
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f001 fd0b 	bl	80026b8 <OS_VoidSuspendTask>
	OS_VoidSuspendTask(DISPLAY_MONTHS_TASK);
 8000ca2:	2009      	movs	r0, #9
 8000ca4:	f001 fd08 	bl	80026b8 <OS_VoidSuspendTask>
	OS_VoidSuspendTask(DISPLAY_DAYS_TASK);
 8000ca8:	200a      	movs	r0, #10
 8000caa:	f001 fd05 	bl	80026b8 <OS_VoidSuspendTask>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000c0 	.word	0x200000c0
 8000cb8:	08000dc9 	.word	0x08000dc9
 8000cbc:	08000d4d 	.word	0x08000d4d
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000f3d 	.word	0x08000f3d
 8000cc8:	08000ec1 	.word	0x08000ec1
 8000ccc:	08000e45 	.word	0x08000e45

08000cd0 <DisplayModule_voidDisplaySeconds>:

void DisplayModule_voidDisplaySeconds(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	u8 u8DisplaySeconds = TimeDisplay.u8Second;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <DisplayModule_voidDisplaySeconds+0x70>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
	static ToggleState_t Tog = On;

	if(Tog)
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <DisplayModule_voidDisplaySeconds+0x74>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d012      	beq.n	8000d0a <DisplayModule_voidDisplaySeconds+0x3a>
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_SECONDS_UNITS);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 fdb5 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_SECONDS_UNITS  , u8DisplaySeconds%10 );
 8000cea:	79fa      	ldrb	r2, [r7, #7]
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <DisplayModule_voidDisplaySeconds+0x78>)
 8000cee:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf2:	08d9      	lsrs	r1, r3, #3
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4619      	mov	r1, r3
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 fdf6 	bl	80018f4 <SSD_voidSendNumber>
 8000d08:	e00c      	b.n	8000d24 <DisplayModule_voidDisplaySeconds+0x54>
	}
	else
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_SECONDS_TENS);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 fda2 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_SECONDS_TENS  , u8DisplaySeconds/10 );
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <DisplayModule_voidDisplaySeconds+0x78>)
 8000d14:	fba2 2303 	umull	r2, r3, r2, r3
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 fde8 	bl	80018f4 <SSD_voidSendNumber>
	}

	Tog = ! Tog ;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <DisplayModule_voidDisplaySeconds+0x74>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	bf0c      	ite	eq
 8000d2c:	2301      	moveq	r3, #1
 8000d2e:	2300      	movne	r3, #0
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <DisplayModule_voidDisplaySeconds+0x74>)
 8000d36:	701a      	strb	r2, [r3, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000c0 	.word	0x200000c0
 8000d44:	20000018 	.word	0x20000018
 8000d48:	cccccccd 	.word	0xcccccccd

08000d4c <DisplayModule_voidDisplayMinutes>:

void DisplayModule_voidDisplayMinutes(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	u8 u8DisplayMinutes = TimeDisplay.u8Minute;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <DisplayModule_voidDisplayMinutes+0x70>)
 8000d54:	785b      	ldrb	r3, [r3, #1]
 8000d56:	71fb      	strb	r3, [r7, #7]
	static ToggleState_t Tog = On;

	if(Tog)
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <DisplayModule_voidDisplayMinutes+0x74>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d012      	beq.n	8000d86 <DisplayModule_voidDisplayMinutes+0x3a>
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_MINUTES_UNITS);
 8000d60:	2002      	movs	r0, #2
 8000d62:	f000 fd77 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_MINUTES_UNITS  , u8DisplayMinutes%10 );
 8000d66:	79fa      	ldrb	r2, [r7, #7]
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <DisplayModule_voidDisplayMinutes+0x78>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	08d9      	lsrs	r1, r3, #3
 8000d70:	460b      	mov	r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f000 fdb8 	bl	80018f4 <SSD_voidSendNumber>
 8000d84:	e00c      	b.n	8000da0 <DisplayModule_voidDisplayMinutes+0x54>
	}
	else
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_MINUTES_TENS);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 fd64 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_MINUTES_TENS  , u8DisplayMinutes/10 );
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <DisplayModule_voidDisplayMinutes+0x78>)
 8000d90:	fba2 2303 	umull	r2, r3, r2, r3
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f000 fdaa 	bl	80018f4 <SSD_voidSendNumber>
	}

	Tog = ! Tog ;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <DisplayModule_voidDisplayMinutes+0x74>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bf0c      	ite	eq
 8000da8:	2301      	moveq	r3, #1
 8000daa:	2300      	movne	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <DisplayModule_voidDisplayMinutes+0x74>)
 8000db2:	701a      	strb	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000c0 	.word	0x200000c0
 8000dc0:	20000019 	.word	0x20000019
 8000dc4:	cccccccd 	.word	0xcccccccd

08000dc8 <DisplayModule_voidDisplayHours>:

void DisplayModule_voidDisplayHours(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	u8 u8DisplayHours = TimeDisplay.u8Hour;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <DisplayModule_voidDisplayHours+0x70>)
 8000dd0:	789b      	ldrb	r3, [r3, #2]
 8000dd2:	71fb      	strb	r3, [r7, #7]
	static ToggleState_t Tog = On;

	if(Tog)
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <DisplayModule_voidDisplayHours+0x74>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d012      	beq.n	8000e02 <DisplayModule_voidDisplayHours+0x3a>
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_HOURS_UNITS);
 8000ddc:	2004      	movs	r0, #4
 8000dde:	f000 fd39 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_HOURS_UNITS  , u8DisplayHours%10 );
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <DisplayModule_voidDisplayHours+0x78>)
 8000de6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dea:	08d9      	lsrs	r1, r3, #3
 8000dec:	460b      	mov	r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f000 fd7a 	bl	80018f4 <SSD_voidSendNumber>
 8000e00:	e00c      	b.n	8000e1c <DisplayModule_voidDisplayHours+0x54>
	}
	else
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_HOURS_TENS);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f000 fd26 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_HOURS_TENS  , u8DisplayHours/10 );
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <DisplayModule_voidDisplayHours+0x78>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	08db      	lsrs	r3, r3, #3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	2005      	movs	r0, #5
 8000e18:	f000 fd6c 	bl	80018f4 <SSD_voidSendNumber>
	}

	Tog = ! Tog ;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <DisplayModule_voidDisplayHours+0x74>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf0c      	ite	eq
 8000e24:	2301      	moveq	r3, #1
 8000e26:	2300      	movne	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <DisplayModule_voidDisplayHours+0x74>)
 8000e2e:	701a      	strb	r2, [r3, #0]
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000c0 	.word	0x200000c0
 8000e3c:	2000001a 	.word	0x2000001a
 8000e40:	cccccccd 	.word	0xcccccccd

08000e44 <DisplayModule_voidDisplayDays>:

void DisplayModule_voidDisplayDays(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	u8 u8DisplayDays = DateDisplay.u8Day;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <DisplayModule_voidDisplayDays+0x70>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
	static ToggleState_t Tog = On;

	if(Tog)
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <DisplayModule_voidDisplayDays+0x74>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d012      	beq.n	8000e7e <DisplayModule_voidDisplayDays+0x3a>
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_DAYS_UNITS);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 fcfb 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_DAYS_UNITS  , u8DisplayDays%10 );
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <DisplayModule_voidDisplayDays+0x78>)
 8000e62:	fba3 1302 	umull	r1, r3, r3, r2
 8000e66:	08d9      	lsrs	r1, r3, #3
 8000e68:	460b      	mov	r3, r1
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4619      	mov	r1, r3
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 fd3c 	bl	80018f4 <SSD_voidSendNumber>
 8000e7c:	e00c      	b.n	8000e98 <DisplayModule_voidDisplayDays+0x54>
	}
	else
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_DAYS_TENS);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 fce8 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_DAYS_TENS  , u8DisplayDays/10 );
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <DisplayModule_voidDisplayDays+0x78>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 fd2e 	bl	80018f4 <SSD_voidSendNumber>
	}

	Tog = ! Tog ;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <DisplayModule_voidDisplayDays+0x74>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2301      	moveq	r3, #1
 8000ea2:	2300      	movne	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <DisplayModule_voidDisplayDays+0x74>)
 8000eaa:	701a      	strb	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000c4 	.word	0x200000c4
 8000eb8:	2000001b 	.word	0x2000001b
 8000ebc:	cccccccd 	.word	0xcccccccd

08000ec0 <DisplayModule_voidDisplayMonths>:

void DisplayModule_voidDisplayMonths(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	u8 u8DisplayMonths = DateDisplay.u8Month;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <DisplayModule_voidDisplayMonths+0x70>)
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	71fb      	strb	r3, [r7, #7]
	static ToggleState_t Tog = On;

	if(Tog)
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <DisplayModule_voidDisplayMonths+0x74>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d012      	beq.n	8000efa <DisplayModule_voidDisplayMonths+0x3a>
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_MONTHS_UNITS);
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f000 fcbd 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_MONTHS_UNITS  , u8DisplayMonths%10 );
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <DisplayModule_voidDisplayMonths+0x78>)
 8000ede:	fba3 1302 	umull	r1, r3, r3, r2
 8000ee2:	08d9      	lsrs	r1, r3, #3
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f000 fcfe 	bl	80018f4 <SSD_voidSendNumber>
 8000ef8:	e00c      	b.n	8000f14 <DisplayModule_voidDisplayMonths+0x54>
	}
	else
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_MONTHS_TENS);
 8000efa:	2003      	movs	r0, #3
 8000efc:	f000 fcaa 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_MONTHS_TENS  , u8DisplayMonths/10 );
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <DisplayModule_voidDisplayMonths+0x78>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 fcf0 	bl	80018f4 <SSD_voidSendNumber>
	}

	Tog = ! Tog ;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <DisplayModule_voidDisplayMonths+0x74>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf0c      	ite	eq
 8000f1c:	2301      	moveq	r3, #1
 8000f1e:	2300      	movne	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <DisplayModule_voidDisplayMonths+0x74>)
 8000f26:	701a      	strb	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000c4 	.word	0x200000c4
 8000f34:	2000001c 	.word	0x2000001c
 8000f38:	cccccccd 	.word	0xcccccccd

08000f3c <DisplayModule_voidDisplayYears>:

void DisplayModule_voidDisplayYears(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	u8 u8DisplayYears = DateDisplay.u8Year;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <DisplayModule_voidDisplayYears+0x70>)
 8000f44:	789b      	ldrb	r3, [r3, #2]
 8000f46:	71fb      	strb	r3, [r7, #7]
	static ToggleState_t Tog = On;

	if(Tog)
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <DisplayModule_voidDisplayYears+0x74>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d012      	beq.n	8000f76 <DisplayModule_voidDisplayYears+0x3a>
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_YEARS_UNITS);
 8000f50:	2004      	movs	r0, #4
 8000f52:	f000 fc7f 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_YEARS_UNITS  , u8DisplayYears%10 );
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <DisplayModule_voidDisplayYears+0x78>)
 8000f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f5e:	08d9      	lsrs	r1, r3, #3
 8000f60:	460b      	mov	r3, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2004      	movs	r0, #4
 8000f70:	f000 fcc0 	bl	80018f4 <SSD_voidSendNumber>
 8000f74:	e00c      	b.n	8000f90 <DisplayModule_voidDisplayYears+0x54>
	}
	else
	{
		SSD_voidEnableOneDisableRest(ADISPLAY_YEARS_TENS);
 8000f76:	2005      	movs	r0, #5
 8000f78:	f000 fc6c 	bl	8001854 <SSD_voidEnableOneDisableRest>
		SSD_voidSendNumber( ADISPLAY_YEARS_TENS  , u8DisplayYears/10 );
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <DisplayModule_voidDisplayYears+0x78>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f000 fcb2 	bl	80018f4 <SSD_voidSendNumber>
	}

	Tog = ! Tog ;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <DisplayModule_voidDisplayYears+0x74>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	bf0c      	ite	eq
 8000f98:	2301      	moveq	r3, #1
 8000f9a:	2300      	movne	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <DisplayModule_voidDisplayYears+0x74>)
 8000fa2:	701a      	strb	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200000c4 	.word	0x200000c4
 8000fb0:	2000001d 	.word	0x2000001d
 8000fb4:	cccccccd 	.word	0xcccccccd

08000fb8 <DisplayModule_voidSetTime>:

void DisplayModule_voidSetTime(Time_t localTime)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	TimeDisplay = localTime;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <DisplayModule_voidSetTime+0x24>)
 8000fc2:	1d3a      	adds	r2, r7, #4
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	8019      	strh	r1, [r3, #0]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	0c12      	lsrs	r2, r2, #16
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200000c0 	.word	0x200000c0

08000fe0 <DisplayModule_voidSetDate>:

void DisplayModule_voidSetDate(Date_t localDate)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	DateDisplay = localDate;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <DisplayModule_voidSetDate+0x24>)
 8000fea:	1d3a      	adds	r2, r7, #4
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	8019      	strh	r1, [r3, #0]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	0c12      	lsrs	r2, r2, #16
 8000ff6:	701a      	strb	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200000c4 	.word	0x200000c4

08001008 <InputModule_voidInit>:
static u8 InputModule_u8WhatToEdit = EDIT_TIME;

static u8 InputModule_u8DisplayStates = DISPLAY_TIME;

void InputModule_voidInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	Switches.DownSwitchState = SWITCH_RELEASED;
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <InputModule_voidInit+0xd0>)
 800100e:	2201      	movs	r2, #1
 8001010:	705a      	strb	r2, [r3, #1]
	Switches.UpSwitchState = SWITCH_RELEASED;
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <InputModule_voidInit+0xd0>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
	Switches.LeftSwitchState = SWITCH_RELEASED;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <InputModule_voidInit+0xd0>)
 800101a:	2201      	movs	r2, #1
 800101c:	709a      	strb	r2, [r3, #2]
	Switches.RightSwitchState = SWITCH_RELEASED;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <InputModule_voidInit+0xd0>)
 8001020:	2201      	movs	r2, #1
 8001022:	70da      	strb	r2, [r3, #3]
	Switches.CenterSwitchState = CENTERSWITCH_DISPLAY;
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <InputModule_voidInit+0xd0>)
 8001026:	2201      	movs	r2, #1
 8001028:	711a      	strb	r2, [r3, #4]

	Hswitch_voidInit();
 800102a:	f000 fa4b 	bl	80014c4 <Hswitch_voidInit>

	/*Enable Interrupt for Switches*/
	MEXTI_voidEnableEXTI(LINE9);
 800102e:	2009      	movs	r0, #9
 8001030:	f000 ffd6 	bl	8001fe0 <MEXTI_voidEnableEXTI>
	MEXTI_voidEnableEXTI(LINE8);
 8001034:	2008      	movs	r0, #8
 8001036:	f000 ffd3 	bl	8001fe0 <MEXTI_voidEnableEXTI>
	MEXTI_voidEnableEXTI(LINE7);
 800103a:	2007      	movs	r0, #7
 800103c:	f000 ffd0 	bl	8001fe0 <MEXTI_voidEnableEXTI>
	MEXTI_voidEnableEXTI(LINE6);
 8001040:	2006      	movs	r0, #6
 8001042:	f000 ffcd 	bl	8001fe0 <MEXTI_voidEnableEXTI>
	MEXTI_voidEnableEXTI(LINE5);
 8001046:	2005      	movs	r0, #5
 8001048:	f000 ffca 	bl	8001fe0 <MEXTI_voidEnableEXTI>

	MNVIC_voidEnableInterrupt(EXTI5);
 800104c:	2017      	movs	r0, #23
 800104e:	f001 f9f1 	bl	8002434 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(EXTI6);
 8001052:	2017      	movs	r0, #23
 8001054:	f001 f9ee 	bl	8002434 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(EXTI7);
 8001058:	2017      	movs	r0, #23
 800105a:	f001 f9eb 	bl	8002434 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(EXTI8);
 800105e:	2017      	movs	r0, #23
 8001060:	f001 f9e8 	bl	8002434 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(EXTI9);
 8001064:	2017      	movs	r0, #23
 8001066:	f001 f9e5 	bl	8002434 <MNVIC_voidEnableInterrupt>

	AFIO_voidSetEXTIConfiguration(AFIO_EXTI5 ,GPIOB_Port);
 800106a:	2101      	movs	r1, #1
 800106c:	2005      	movs	r0, #5
 800106e:	f000 ff31 	bl	8001ed4 <AFIO_voidSetEXTIConfiguration>
	AFIO_voidSetEXTIConfiguration(AFIO_EXTI6 ,GPIOB_Port);
 8001072:	2101      	movs	r1, #1
 8001074:	2006      	movs	r0, #6
 8001076:	f000 ff2d 	bl	8001ed4 <AFIO_voidSetEXTIConfiguration>
	AFIO_voidSetEXTIConfiguration(AFIO_EXTI7 ,GPIOB_Port);
 800107a:	2101      	movs	r1, #1
 800107c:	2007      	movs	r0, #7
 800107e:	f000 ff29 	bl	8001ed4 <AFIO_voidSetEXTIConfiguration>
	AFIO_voidSetEXTIConfiguration(AFIO_EXTI8 ,GPIOB_Port);
 8001082:	2101      	movs	r1, #1
 8001084:	2008      	movs	r0, #8
 8001086:	f000 ff25 	bl	8001ed4 <AFIO_voidSetEXTIConfiguration>
	AFIO_voidSetEXTIConfiguration(AFIO_EXTI9 ,GPIOB_Port);
 800108a:	2101      	movs	r1, #1
 800108c:	2009      	movs	r0, #9
 800108e:	f000 ff21 	bl	8001ed4 <AFIO_voidSetEXTIConfiguration>

	MEXTI_voidSetCallBack(InputModule_voidActivateProcessInputsTask , LINE5);
 8001092:	2105      	movs	r1, #5
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <InputModule_voidInit+0xd4>)
 8001096:	f000 ffb9 	bl	800200c <MEXTI_voidSetCallBack>

	MEXTI_voidInit(LINE9, FALLING_EDGE);
 800109a:	2101      	movs	r1, #1
 800109c:	2009      	movs	r0, #9
 800109e:	f000 ff53 	bl	8001f48 <MEXTI_voidInit>
	MEXTI_voidInit(LINE8, FALLING_EDGE);
 80010a2:	2101      	movs	r1, #1
 80010a4:	2008      	movs	r0, #8
 80010a6:	f000 ff4f 	bl	8001f48 <MEXTI_voidInit>
	MEXTI_voidInit(LINE7, FALLING_EDGE);
 80010aa:	2101      	movs	r1, #1
 80010ac:	2007      	movs	r0, #7
 80010ae:	f000 ff4b 	bl	8001f48 <MEXTI_voidInit>
	MEXTI_voidInit(LINE6, FALLING_EDGE);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2006      	movs	r0, #6
 80010b6:	f000 ff47 	bl	8001f48 <MEXTI_voidInit>
	MEXTI_voidInit(LINE5, FALLING_EDGE);
 80010ba:	2101      	movs	r1, #1
 80010bc:	2005      	movs	r0, #5
 80010be:	f000 ff43 	bl	8001f48 <MEXTI_voidInit>

	/*periodicity = 40, for 5 buttons : 200, and tick time : 1ms
	 * then 200 * 1 ms = 200 ms;
	 * 200 ms is smallest time between 2 ticks*/
	OS_VoidCreateTask(PROCESS_INPUTS_TASK, 40, InputModule_voidProcessInputs, 0);
 80010c2:	2300      	movs	r3, #0
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <InputModule_voidInit+0xd8>)
 80010c6:	2128      	movs	r1, #40	; 0x28
 80010c8:	2000      	movs	r0, #0
 80010ca:	f001 fac3 	bl	8002654 <OS_VoidCreateTask>

	/*Process Input is Off till any switch is pressed, then the ISR will Activate it*/
	OS_VoidSuspendTask(PROCESS_INPUTS_TASK);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f001 faf2 	bl	80026b8 <OS_VoidSuspendTask>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000c8 	.word	0x200000c8
 80010dc:	080013e5 	.word	0x080013e5
 80010e0:	080010e5 	.word	0x080010e5

080010e4 <InputModule_voidProcessInputs>:

void InputModule_voidProcessInputs(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	static u8 u8Counter = 5;

	/*arrange according to priority*/
	switch(u8Counter)
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <InputModule_voidProcessInputs+0x98>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d842      	bhi.n	8001176 <InputModule_voidProcessInputs+0x92>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <InputModule_voidProcessInputs+0x14>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	0800116b 	.word	0x0800116b
 80010fc:	08001159 	.word	0x08001159
 8001100:	08001147 	.word	0x08001147
 8001104:	08001135 	.word	0x08001135
 8001108:	08001123 	.word	0x08001123
 800110c:	08001111 	.word	0x08001111
	{
		case 5 :
			InputModule_voidProcessCenterSwitch();
 8001110:	f000 f836 	bl	8001180 <InputModule_voidProcessCenterSwitch>
			u8Counter--;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <InputModule_voidProcessInputs+0x98>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <InputModule_voidProcessInputs+0x98>)
 800111e:	701a      	strb	r2, [r3, #0]
			break;
 8001120:	e02a      	b.n	8001178 <InputModule_voidProcessInputs+0x94>
		case 4 :
			InputModule_voidProcessRightSwitch();
 8001122:	f000 f863 	bl	80011ec <InputModule_voidProcessRightSwitch>
			u8Counter--;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <InputModule_voidProcessInputs+0x98>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <InputModule_voidProcessInputs+0x98>)
 8001130:	701a      	strb	r2, [r3, #0]
			break;
 8001132:	e021      	b.n	8001178 <InputModule_voidProcessInputs+0x94>
		case 3 :
			InputModule_voidProcessLeftSwitch();
 8001134:	f000 f8b2 	bl	800129c <InputModule_voidProcessLeftSwitch>
			u8Counter--;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <InputModule_voidProcessInputs+0x98>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	3b01      	subs	r3, #1
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <InputModule_voidProcessInputs+0x98>)
 8001142:	701a      	strb	r2, [r3, #0]
			break;
 8001144:	e018      	b.n	8001178 <InputModule_voidProcessInputs+0x94>
		case 2 :
			InputModule_voidProcessUpSwitch();
 8001146:	f000 f8f3 	bl	8001330 <InputModule_voidProcessUpSwitch>
			u8Counter--;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <InputModule_voidProcessInputs+0x98>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <InputModule_voidProcessInputs+0x98>)
 8001154:	701a      	strb	r2, [r3, #0]
			break;
 8001156:	e00f      	b.n	8001178 <InputModule_voidProcessInputs+0x94>
		case 1 :
			InputModule_voidProcessDownSwitch();
 8001158:	f000 f920 	bl	800139c <InputModule_voidProcessDownSwitch>
			u8Counter--;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <InputModule_voidProcessInputs+0x98>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <InputModule_voidProcessInputs+0x98>)
 8001166:	701a      	strb	r2, [r3, #0]
			break;
 8001168:	e006      	b.n	8001178 <InputModule_voidProcessInputs+0x94>
		case 0 :
			/*reload it to 5 for next Switch Press (ISR)*/
			u8Counter = 5;
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <InputModule_voidProcessInputs+0x98>)
 800116c:	2205      	movs	r2, #5
 800116e:	701a      	strb	r2, [r3, #0]
			/*Suspend this task*/
			OS_VoidSuspendTask(PROCESS_INPUTS_TASK);
 8001170:	2000      	movs	r0, #0
 8001172:	f001 faa1 	bl	80026b8 <OS_VoidSuspendTask>
		default :
			break;
 8001176:	bf00      	nop
	}
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000021 	.word	0x20000021

08001180 <InputModule_voidProcessCenterSwitch>:


static void InputModule_voidProcessCenterSwitch(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	ToggleState_t CenterSwitchState = Hswitch_voidGetCenterSwitch();
 8001186:	f000 f9c9 	bl	800151c <Hswitch_voidGetCenterSwitch>
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]

	if(CenterSwitchState == SWITCH_PRESSED)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d123      	bne.n	80011dc <InputModule_voidProcessCenterSwitch+0x5c>
	{
		Switches.CenterSwitchState = ! Switches.CenterSwitchState;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <InputModule_voidProcessCenterSwitch+0x64>)
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <InputModule_voidProcessCenterSwitch+0x64>)
 80011a6:	711a      	strb	r2, [r3, #4]
		if(Switches.CenterSwitchState == CENTERSWITCH_DISPLAY)
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <InputModule_voidProcessCenterSwitch+0x64>)
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d103      	bne.n	80011b8 <InputModule_voidProcessCenterSwitch+0x38>
		{
			ControlModule_voidSetDisplayOrEdit(DISPLAY);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fce9 	bl	8000b88 <ControlModule_voidSetDisplayOrEdit>
			ControlModule_voidSetDisplayOrEdit(EDIT);
			ControlModule_voidSetWhatToEdit(InputModule_u8WhatToEdit);
			InputModule_u8WhatToEdit == 0 ? (EDIT_TIME) : (InputModule_u8WhatToEdit--) ;
		}
	}
}
 80011b6:	e011      	b.n	80011dc <InputModule_voidProcessCenterSwitch+0x5c>
			ControlModule_voidSetDisplayOrEdit(EDIT);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fce5 	bl	8000b88 <ControlModule_voidSetDisplayOrEdit>
			ControlModule_voidSetWhatToEdit(InputModule_u8WhatToEdit);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <InputModule_voidProcessCenterSwitch+0x68>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fd10 	bl	8000be8 <ControlModule_voidSetWhatToEdit>
			InputModule_u8WhatToEdit == 0 ? (EDIT_TIME) : (InputModule_u8WhatToEdit--) ;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <InputModule_voidProcessCenterSwitch+0x68>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <InputModule_voidProcessCenterSwitch+0x5c>
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <InputModule_voidProcessCenterSwitch+0x68>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <InputModule_voidProcessCenterSwitch+0x68>)
 80011da:	701a      	strb	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000c8 	.word	0x200000c8
 80011e8:	2000001f 	.word	0x2000001f

080011ec <InputModule_voidProcessRightSwitch>:

static void InputModule_voidProcessRightSwitch(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	ToggleState_t RightSwitchState = Hswitch_voidGetRightSwitch();
 80011f2:	f000 f9ab 	bl	800154c <Hswitch_voidGetRightSwitch>
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]

	if(RightSwitchState == SWITCH_PRESSED)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d142      	bne.n	8001286 <InputModule_voidProcessRightSwitch+0x9a>
	{
		if(Switches.CenterSwitchState == CENTERSWITCH_DISPLAY)
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <InputModule_voidProcessRightSwitch+0xa4>)
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d121      	bne.n	800124c <InputModule_voidProcessRightSwitch+0x60>
		{
			switch(InputModule_u8DisplayStates)
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <InputModule_voidProcessRightSwitch+0xa8>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d008      	beq.n	8001222 <InputModule_voidProcessRightSwitch+0x36>
 8001210:	2b02      	cmp	r3, #2
 8001212:	d002      	beq.n	800121a <InputModule_voidProcessRightSwitch+0x2e>
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <InputModule_voidProcessRightSwitch+0x3e>
 8001218:	e00b      	b.n	8001232 <InputModule_voidProcessRightSwitch+0x46>
			{
			case RIGHTSWITCH_TIME :
				ControlModule_voidSetDisplayState(DISPLAY_TIME);
 800121a:	2002      	movs	r0, #2
 800121c:	f7ff fca4 	bl	8000b68 <ControlModule_voidSetDisplayState>
				break;
 8001220:	e007      	b.n	8001232 <InputModule_voidProcessRightSwitch+0x46>

			case RIGHTSWITCH_DATE :
				ControlModule_voidSetDisplayState(DISPLAY_DATE);
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff fca0 	bl	8000b68 <ControlModule_voidSetDisplayState>
				break;
 8001228:	e003      	b.n	8001232 <InputModule_voidProcessRightSwitch+0x46>

			case RIGHTSWITCH_STOPWATCH :
				ControlModule_voidSetDisplayState(DISPLAY_STOPWATCH);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fc9c 	bl	8000b68 <ControlModule_voidSetDisplayState>
				break;
 8001230:	bf00      	nop
			}
			InputModule_u8DisplayStates = InputModule_u8DisplayStates == RIGHTSWITCH_STOPWATCH ? RIGHTSWITCH_TIME : (InputModule_u8DisplayStates-1);
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <InputModule_voidProcessRightSwitch+0xa8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <InputModule_voidProcessRightSwitch+0x58>
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <InputModule_voidProcessRightSwitch+0xa8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	e000      	b.n	8001246 <InputModule_voidProcessRightSwitch+0x5a>
 8001244:	2302      	movs	r3, #2
 8001246:	4a13      	ldr	r2, [pc, #76]	; (8001294 <InputModule_voidProcessRightSwitch+0xa8>)
 8001248:	7013      	strb	r3, [r2, #0]
			InputModule_u8EditPosition--;
			InputModule_u8EditPosition = (InputModule_u8EditPosition < EDIT_SECONDS) || (InputModule_u8EditPosition > EDIT_HOURS) ? EDIT_HOURS : InputModule_u8EditPosition;
			ControlModule_voidSetEditPosition(InputModule_u8EditPosition);
		}
	}
}
 800124a:	e01c      	b.n	8001286 <InputModule_voidProcessRightSwitch+0x9a>
		else if(Switches.CenterSwitchState == CENTERSWITCH_EDIT_TIME)
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <InputModule_voidProcessRightSwitch+0xa4>)
 800124e:	791b      	ldrb	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d118      	bne.n	8001286 <InputModule_voidProcessRightSwitch+0x9a>
			InputModule_u8EditPosition--;
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <InputModule_voidProcessRightSwitch+0xac>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3b01      	subs	r3, #1
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <InputModule_voidProcessRightSwitch+0xac>)
 800125e:	701a      	strb	r2, [r3, #0]
			InputModule_u8EditPosition = (InputModule_u8EditPosition < EDIT_SECONDS) || (InputModule_u8EditPosition > EDIT_HOURS) ? EDIT_HOURS : InputModule_u8EditPosition;
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <InputModule_voidProcessRightSwitch+0xac>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <InputModule_voidProcessRightSwitch+0x8a>
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <InputModule_voidProcessRightSwitch+0xac>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b03      	cmp	r3, #3
 800126e:	d802      	bhi.n	8001276 <InputModule_voidProcessRightSwitch+0x8a>
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <InputModule_voidProcessRightSwitch+0xac>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	e000      	b.n	8001278 <InputModule_voidProcessRightSwitch+0x8c>
 8001276:	2303      	movs	r3, #3
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <InputModule_voidProcessRightSwitch+0xac>)
 800127a:	7013      	strb	r3, [r2, #0]
			ControlModule_voidSetEditPosition(InputModule_u8EditPosition);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <InputModule_voidProcessRightSwitch+0xac>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fca1 	bl	8000bc8 <ControlModule_voidSetEditPosition>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000c8 	.word	0x200000c8
 8001294:	20000020 	.word	0x20000020
 8001298:	2000001e 	.word	0x2000001e

0800129c <InputModule_voidProcessLeftSwitch>:

static void InputModule_voidProcessLeftSwitch(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	ToggleState_t LeftSwitchState = Hswitch_voidGetLeftSwitch();
 80012a2:	f000 f96b 	bl	800157c <Hswitch_voidGetLeftSwitch>
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]

	if(LeftSwitchState == SWITCH_PRESSED)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d136      	bne.n	800131e <InputModule_voidProcessLeftSwitch+0x82>
	{
		if(Switches.CenterSwitchState == CENTERSWITCH_DISPLAY)
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <InputModule_voidProcessLeftSwitch+0x8c>)
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d115      	bne.n	80012e4 <InputModule_voidProcessLeftSwitch+0x48>
		{
			Switches.LeftSwitchState = ! Switches.LeftSwitchState;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <InputModule_voidProcessLeftSwitch+0x8c>)
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <InputModule_voidProcessLeftSwitch+0x8c>)
 80012ca:	709a      	strb	r2, [r3, #2]

			if(Switches.LeftSwitchState == LEFTSWITCH_ALARM_OFF)
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <InputModule_voidProcessLeftSwitch+0x8c>)
 80012ce:	789b      	ldrb	r3, [r3, #2]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d103      	bne.n	80012dc <InputModule_voidProcessLeftSwitch+0x40>
			{
				ControlModule_voidSetAlarmState(ALARM_OFF);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc2f 	bl	8000b38 <ControlModule_voidSetAlarmState>
			InputModule_u8EditPosition++;
			InputModule_u8EditPosition = (InputModule_u8EditPosition > EDIT_HOURS) || (InputModule_u8EditPosition < EDIT_SECONDS) ? EDIT_SECONDS : InputModule_u8EditPosition;
			ControlModule_voidSetEditPosition(InputModule_u8EditPosition);
		}
	}
}
 80012da:	e020      	b.n	800131e <InputModule_voidProcessLeftSwitch+0x82>
				ControlModule_voidSetAlarmState(ALARM_ON);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff fc2b 	bl	8000b38 <ControlModule_voidSetAlarmState>
}
 80012e2:	e01c      	b.n	800131e <InputModule_voidProcessLeftSwitch+0x82>
		else if(Switches.CenterSwitchState == CENTERSWITCH_EDIT_TIME)
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <InputModule_voidProcessLeftSwitch+0x8c>)
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d118      	bne.n	800131e <InputModule_voidProcessLeftSwitch+0x82>
			InputModule_u8EditPosition++;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <InputModule_voidProcessLeftSwitch+0x90>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <InputModule_voidProcessLeftSwitch+0x90>)
 80012f6:	701a      	strb	r2, [r3, #0]
			InputModule_u8EditPosition = (InputModule_u8EditPosition > EDIT_HOURS) || (InputModule_u8EditPosition < EDIT_SECONDS) ? EDIT_SECONDS : InputModule_u8EditPosition;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <InputModule_voidProcessLeftSwitch+0x90>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d806      	bhi.n	800130e <InputModule_voidProcessLeftSwitch+0x72>
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <InputModule_voidProcessLeftSwitch+0x90>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <InputModule_voidProcessLeftSwitch+0x72>
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <InputModule_voidProcessLeftSwitch+0x90>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	e000      	b.n	8001310 <InputModule_voidProcessLeftSwitch+0x74>
 800130e:	2301      	movs	r3, #1
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <InputModule_voidProcessLeftSwitch+0x90>)
 8001312:	7013      	strb	r3, [r2, #0]
			ControlModule_voidSetEditPosition(InputModule_u8EditPosition);
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <InputModule_voidProcessLeftSwitch+0x90>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fc55 	bl	8000bc8 <ControlModule_voidSetEditPosition>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000c8 	.word	0x200000c8
 800132c:	2000001e 	.word	0x2000001e

08001330 <InputModule_voidProcessUpSwitch>:

static void InputModule_voidProcessUpSwitch(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	ToggleState_t UpSwitchState = Hswitch_voidGetUpSwitch();
 8001336:	f000 f939 	bl	80015ac <Hswitch_voidGetUpSwitch>
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]

	if(UpSwitchState == SWITCH_PRESSED)
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d121      	bne.n	8001388 <InputModule_voidProcessUpSwitch+0x58>
	{
		if(Switches.CenterSwitchState == CENTERSWITCH_DISPLAY)
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <InputModule_voidProcessUpSwitch+0x68>)
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d115      	bne.n	8001378 <InputModule_voidProcessUpSwitch+0x48>
		{
			Switches.UpSwitchState = ! Switches.UpSwitchState;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <InputModule_voidProcessUpSwitch+0x68>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf0c      	ite	eq
 8001354:	2301      	moveq	r3, #1
 8001356:	2300      	movne	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <InputModule_voidProcessUpSwitch+0x68>)
 800135e:	701a      	strb	r2, [r3, #0]
			if(Switches.UpSwitchState)
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <InputModule_voidProcessUpSwitch+0x68>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <InputModule_voidProcessUpSwitch+0x40>
			{

				ControlModule_voidSetStopWatchState(RESUME_STOPWATCH);
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff fc4d 	bl	8000c08 <ControlModule_voidSetStopWatchState>
	}
	else
	{
		ControlModule_voidSetEditState(NONE);
	}
}
 800136e:	e00e      	b.n	800138e <InputModule_voidProcessUpSwitch+0x5e>
				ControlModule_voidSetStopWatchState(STOP_STOPWATCH);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fc49 	bl	8000c08 <ControlModule_voidSetStopWatchState>
}
 8001376:	e00a      	b.n	800138e <InputModule_voidProcessUpSwitch+0x5e>
		else if(Switches.CenterSwitchState == CENTERSWITCH_EDIT_TIME)
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <InputModule_voidProcessUpSwitch+0x68>)
 800137a:	791b      	ldrb	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d106      	bne.n	800138e <InputModule_voidProcessUpSwitch+0x5e>
			ControlModule_voidSetEditState(INCREASE);
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fc11 	bl	8000ba8 <ControlModule_voidSetEditState>
}
 8001386:	e002      	b.n	800138e <InputModule_voidProcessUpSwitch+0x5e>
		ControlModule_voidSetEditState(NONE);
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff fc0d 	bl	8000ba8 <ControlModule_voidSetEditState>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200000c8 	.word	0x200000c8

0800139c <InputModule_voidProcessDownSwitch>:

static void InputModule_voidProcessDownSwitch(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	ToggleState_t DownSwitchState = Hswitch_voidGetDownSwitch();
 80013a2:	f000 f91b 	bl	80015dc <Hswitch_voidGetDownSwitch>
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]

	if(DownSwitchState == SWITCH_PRESSED)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10f      	bne.n	80013d0 <InputModule_voidProcessDownSwitch+0x34>
	{
		if(Switches.CenterSwitchState == CENTERSWITCH_DISPLAY)
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <InputModule_voidProcessDownSwitch+0x44>)
 80013b2:	791b      	ldrb	r3, [r3, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d103      	bne.n	80013c0 <InputModule_voidProcessDownSwitch+0x24>
		{
			ControlModule_voidSetStopWatchState(RESET_STOPWATCH);
 80013b8:	2002      	movs	r0, #2
 80013ba:	f7ff fc25 	bl	8000c08 <ControlModule_voidSetStopWatchState>
	}
	else
	{
		ControlModule_voidSetEditState(NONE);
	}
}
 80013be:	e00a      	b.n	80013d6 <InputModule_voidProcessDownSwitch+0x3a>
		else if(Switches.CenterSwitchState == CENTERSWITCH_EDIT_TIME)
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <InputModule_voidProcessDownSwitch+0x44>)
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d106      	bne.n	80013d6 <InputModule_voidProcessDownSwitch+0x3a>
			ControlModule_voidSetEditState(DECREASE);
 80013c8:	2002      	movs	r0, #2
 80013ca:	f7ff fbed 	bl	8000ba8 <ControlModule_voidSetEditState>
}
 80013ce:	e002      	b.n	80013d6 <InputModule_voidProcessDownSwitch+0x3a>
		ControlModule_voidSetEditState(NONE);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fbe9 	bl	8000ba8 <ControlModule_voidSetEditState>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000c8 	.word	0x200000c8

080013e4 <InputModule_voidActivateProcessInputsTask>:

/*if any pushButton is pressed, an interrupt to EXTI9_5_IRQHandler will occur,
 * that function will be called when the interrupt occur
 * the function Activate : "InputModule_voidProcessInputs" Task*/
void InputModule_voidActivateProcessInputsTask(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	OS_VoidResumeTask(PROCESS_INPUTS_TASK);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f001 f979 	bl	80026e0 <OS_VoidResumeTask>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <StatusModule_voidInit>:
/*OS*/
#include <OS/OS_interface.h>
#include <OS/OS_config.h>

void StatusModule_voidInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	OS_VoidCreateTask(ACTIVATE_ALARM_TASK, 1000, StatusModule_voidActivateAlarm, 0);
 80013f8:	2300      	movs	r3, #0
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <StatusModule_voidInit+0x1c>)
 80013fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001400:	2004      	movs	r0, #4
 8001402:	f001 f927 	bl	8002654 <OS_VoidCreateTask>

	/*Alarm is initially Off*/
	OS_VoidSuspendTask(ACTIVATE_ALARM_TASK);
 8001406:	2004      	movs	r0, #4
 8001408:	f001 f956 	bl	80026b8 <OS_VoidSuspendTask>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	08001431 	.word	0x08001431

08001414 <StatusModule_voidAlarmOn>:
	Hled_voidLedOff(HLED_Green_Time);
	Hled_voidLedOff(HLED_Yellow_Date);
}

void StatusModule_voidAlarmOn(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	Hled_voidLedOn(HLED_Red_Alarm);
 8001418:	2000      	movs	r0, #0
 800141a:	f000 f8f7 	bl	800160c <Hled_voidLedOn>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <StatusModule_voidAlarmOff>:

void StatusModule_voidAlarmOff(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
	Hled_voidLedOff(HLED_Red_Alarm);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f914 	bl	8001654 <Hled_voidLedOff>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <StatusModule_voidActivateAlarm>:

void StatusModule_voidActivateAlarm(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	static u8 u8Counter = 10; // 10 seconds ; alarm active for 5 seconds
							 // as this function is called every 1 seconds
	static ToggleState_t state = On;


	Hled_voidLedOn(HBUZZER);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f8e9 	bl	800160c <Hled_voidLedOn>

	if(state)
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <StatusModule_voidActivateAlarm+0x6c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00c      	beq.n	800145c <StatusModule_voidActivateAlarm+0x2c>
	{
		Hled_voidLedOn(HLED_Green_Time);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 f8e2 	bl	800160c <Hled_voidLedOn>
		Hled_voidLedOn(HLED_Red_Alarm);
 8001448:	2000      	movs	r0, #0
 800144a:	f000 f8df 	bl	800160c <Hled_voidLedOn>
		Hled_voidLedOn(HLED_Yellow_Date);
 800144e:	2002      	movs	r0, #2
 8001450:	f000 f8dc 	bl	800160c <Hled_voidLedOn>
		state = Off;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <StatusModule_voidActivateAlarm+0x6c>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e00b      	b.n	8001474 <StatusModule_voidActivateAlarm+0x44>
	}
	else
	{
		Hled_voidLedOff(HLED_Green_Time);
 800145c:	2001      	movs	r0, #1
 800145e:	f000 f8f9 	bl	8001654 <Hled_voidLedOff>
		Hled_voidLedOff(HLED_Red_Alarm);
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f8f6 	bl	8001654 <Hled_voidLedOff>
		Hled_voidLedOff(HLED_Yellow_Date);
 8001468:	2002      	movs	r0, #2
 800146a:	f000 f8f3 	bl	8001654 <Hled_voidLedOff>
		state = On;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <StatusModule_voidActivateAlarm+0x6c>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
	}

	u8Counter--;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <StatusModule_voidActivateAlarm+0x70>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <StatusModule_voidActivateAlarm+0x70>)
 800147e:	701a      	strb	r2, [r3, #0]

	if(u8Counter == 0)
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <StatusModule_voidActivateAlarm+0x70>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <StatusModule_voidActivateAlarm+0x68>
	{
		/*Suspend Alarm Task*/
		OS_VoidSuspendTask(4);
 8001488:	2004      	movs	r0, #4
 800148a:	f001 f915 	bl	80026b8 <OS_VoidSuspendTask>
		StatusModule_voidDeactivateAlarm();
 800148e:	f000 f809 	bl	80014a4 <StatusModule_voidDeactivateAlarm>
		u8Counter = 10;
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <StatusModule_voidActivateAlarm+0x70>)
 8001494:	220a      	movs	r2, #10
 8001496:	701a      	strb	r2, [r3, #0]
	}
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000022 	.word	0x20000022
 80014a0:	20000023 	.word	0x20000023

080014a4 <StatusModule_voidDeactivateAlarm>:

void StatusModule_voidDeactivateAlarm(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	Hled_voidLedOff(HLED_Green_Time);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 f8d3 	bl	8001654 <Hled_voidLedOff>
	Hled_voidLedOff(HLED_Red_Alarm);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f8d0 	bl	8001654 <Hled_voidLedOff>
	Hled_voidLedOff(HLED_Yellow_Date);
 80014b4:	2002      	movs	r0, #2
 80014b6:	f000 f8cd 	bl	8001654 <Hled_voidLedOff>
	Hled_voidLedOff(HBUZZER);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f000 f8ca 	bl	8001654 <Hled_voidLedOff>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <Hswitch_voidInit>:
#include <MCAL/GPIO_interface.h>



void Hswitch_voidInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	u8 u8Iterator;

	for(u8Iterator = 0 ; u8Iterator < NO_OF_SWITCHES ; u8Iterator++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	71fb      	strb	r3, [r7, #7]
 80014ce:	e01b      	b.n	8001508 <Hswitch_voidInit+0x44>
	{
		MGPIO_voidSetPinDirection(ArrOfSwitches[u8Iterator].GPIO_tSwitch, ArrOfSwitches[u8Iterator].u8SwitchMode);
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	79f9      	ldrb	r1, [r7, #7]
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <Hswitch_voidInit+0x54>)
 80014d6:	460b      	mov	r3, r1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	440b      	add	r3, r1
 80014dc:	4403      	add	r3, r0
 80014de:	3302      	adds	r3, #2
 80014e0:	7818      	ldrb	r0, [r3, #0]
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <Hswitch_voidInit+0x54>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	431a      	orrs	r2, r3
 80014f4:	2300      	movs	r3, #0
 80014f6:	f362 030f 	bfi	r3, r2, #0, #16
 80014fa:	4601      	mov	r1, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fe0d 	bl	800211c <MGPIO_voidSetPinDirection>
	for(u8Iterator = 0 ; u8Iterator < NO_OF_SWITCHES ; u8Iterator++)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	3301      	adds	r3, #1
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d9e0      	bls.n	80014d0 <Hswitch_voidInit+0xc>
	}
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	080028a8 	.word	0x080028a8

0800151c <Hswitch_voidGetCenterSwitch>:

ToggleState_t Hswitch_voidGetCenterSwitch(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	ToggleState_t CenterSwitchValue = MGPIO_u8GetPinValue(ArrOfSwitches[SWITCH_CENTER].GPIO_tSwitch);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <Hswitch_voidGetCenterSwitch+0x2c>)
 8001524:	7b1a      	ldrb	r2, [r3, #12]
 8001526:	7b5b      	ldrb	r3, [r3, #13]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	431a      	orrs	r2, r3
 800152c:	2300      	movs	r3, #0
 800152e:	f362 030f 	bfi	r3, r2, #0, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f000 ff48 	bl	80023c8 <MGPIO_u8GetPinValue>
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]

	return CenterSwitchValue;
 800153c:	79fb      	ldrb	r3, [r7, #7]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	080028a8 	.word	0x080028a8

0800154c <Hswitch_voidGetRightSwitch>:

ToggleState_t Hswitch_voidGetRightSwitch(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	ToggleState_t RightSwitchValue = MGPIO_u8GetPinValue(ArrOfSwitches[SWITCH_RIGHT].GPIO_tSwitch);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <Hswitch_voidGetRightSwitch+0x2c>)
 8001554:	7a5a      	ldrb	r2, [r3, #9]
 8001556:	7a9b      	ldrb	r3, [r3, #10]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	431a      	orrs	r2, r3
 800155c:	2300      	movs	r3, #0
 800155e:	f362 030f 	bfi	r3, r2, #0, #16
 8001562:	4618      	mov	r0, r3
 8001564:	f000 ff30 	bl	80023c8 <MGPIO_u8GetPinValue>
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]

	return RightSwitchValue;
 800156c:	79fb      	ldrb	r3, [r7, #7]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	080028a8 	.word	0x080028a8

0800157c <Hswitch_voidGetLeftSwitch>:

ToggleState_t Hswitch_voidGetLeftSwitch(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
	ToggleState_t LeftSwitchValue = MGPIO_u8GetPinValue(ArrOfSwitches[SWITCH_LEFT].GPIO_tSwitch);
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <Hswitch_voidGetLeftSwitch+0x2c>)
 8001584:	799a      	ldrb	r2, [r3, #6]
 8001586:	79db      	ldrb	r3, [r3, #7]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	431a      	orrs	r2, r3
 800158c:	2300      	movs	r3, #0
 800158e:	f362 030f 	bfi	r3, r2, #0, #16
 8001592:	4618      	mov	r0, r3
 8001594:	f000 ff18 	bl	80023c8 <MGPIO_u8GetPinValue>
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]

	return LeftSwitchValue;
 800159c:	79fb      	ldrb	r3, [r7, #7]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	080028a8 	.word	0x080028a8

080015ac <Hswitch_voidGetUpSwitch>:

ToggleState_t Hswitch_voidGetUpSwitch(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
	ToggleState_t UpSwitchValue = MGPIO_u8GetPinValue(ArrOfSwitches[SWITCH_UP].GPIO_tSwitch);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <Hswitch_voidGetUpSwitch+0x2c>)
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	431a      	orrs	r2, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	f362 030f 	bfi	r3, r2, #0, #16
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 ff00 	bl	80023c8 <MGPIO_u8GetPinValue>
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]

	return UpSwitchValue;
 80015cc:	79fb      	ldrb	r3, [r7, #7]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	080028a8 	.word	0x080028a8

080015dc <Hswitch_voidGetDownSwitch>:

ToggleState_t Hswitch_voidGetDownSwitch(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
	ToggleState_t DownSwitchValue = MGPIO_u8GetPinValue(ArrOfSwitches[SWITCH_DOWN].GPIO_tSwitch);
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <Hswitch_voidGetDownSwitch+0x2c>)
 80015e4:	78da      	ldrb	r2, [r3, #3]
 80015e6:	791b      	ldrb	r3, [r3, #4]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	431a      	orrs	r2, r3
 80015ec:	2300      	movs	r3, #0
 80015ee:	f362 030f 	bfi	r3, r2, #0, #16
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fee8 	bl	80023c8 <MGPIO_u8GetPinValue>
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]

	return DownSwitchValue;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	080028a8 	.word	0x080028a8

0800160c <Hled_voidLedOn>:
		MGPIO_voidSetPinDirection(HLEDArrayOfLeds[u8Iterator].HLED_GPIO_tPin, HLEDArrayOfLeds[u8Iterator].HLED_u8ActiveLevel);
	}
}

void Hled_voidLedOn(u8 Hled_u8Number)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(HLEDArrayOfLeds[Hled_u8Number].HLED_GPIO_tPin, HLEDArrayOfLeds[Hled_u8Number].HLED_u8ActiveLevel ^ LOW);
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	79f9      	ldrb	r1, [r7, #7]
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <Hled_voidLedOn+0x44>)
 800161c:	460b      	mov	r3, r1
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	440b      	add	r3, r1
 8001622:	4403      	add	r3, r0
 8001624:	3302      	adds	r3, #2
 8001626:	7818      	ldrb	r0, [r3, #0]
 8001628:	4909      	ldr	r1, [pc, #36]	; (8001650 <Hled_voidLedOn+0x44>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	440b      	add	r3, r1
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	785b      	ldrb	r3, [r3, #1]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	431a      	orrs	r2, r3
 800163a:	2300      	movs	r3, #0
 800163c:	f362 030f 	bfi	r3, r2, #0, #16
 8001640:	4601      	mov	r1, r0
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fe60 	bl	8002308 <MGPIO_voidSetPinValue>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000024 	.word	0x20000024

08001654 <Hled_voidLedOff>:
		u8Tog = On;
	}
}

void Hled_voidLedOff(u8 Hled_u8Number)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(HLEDArrayOfLeds[Hled_u8Number].HLED_GPIO_tPin, HLEDArrayOfLeds[Hled_u8Number].HLED_u8ActiveLevel ^ HIGH);
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	79f9      	ldrb	r1, [r7, #7]
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <Hled_voidLedOff+0x4c>)
 8001664:	460b      	mov	r3, r1
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	440b      	add	r3, r1
 800166a:	4403      	add	r3, r0
 800166c:	3302      	adds	r3, #2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2d8      	uxtb	r0, r3
 8001676:	490a      	ldr	r1, [pc, #40]	; (80016a0 <Hled_voidLedOff+0x4c>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	440b      	add	r3, r1
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	431a      	orrs	r2, r3
 8001688:	2300      	movs	r3, #0
 800168a:	f362 030f 	bfi	r3, r2, #0, #16
 800168e:	4601      	mov	r1, r0
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fe39 	bl	8002308 <MGPIO_voidSetPinValue>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000024 	.word	0x20000024

080016a4 <SSD_Init>:
#include <Libraries/LIB_STDTypes.h>
#include <MCAL/GPIO_interface.h>


void SSD_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
	u8 u8Iterator = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]

	for(u8Iterator = 0 ; u8Iterator < NUM_OF_SSD ; u8Iterator++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	e0c5      	b.n	8001840 <SSD_Init+0x19c>
	{
		// Initialize Enable pin
		MGPIO_voidSetPinDirection(HSSDArrayOfSSD[u8Iterator].GPIO_tEnablePin, OUTPUT_SPEED_2MHZ_PP);
 80016b4:	79fa      	ldrb	r2, [r7, #7]
 80016b6:	4966      	ldr	r1, [pc, #408]	; (8001850 <SSD_Init+0x1ac>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4413      	add	r3, r2
 80016be:	440b      	add	r3, r1
 80016c0:	3308      	adds	r3, #8
 80016c2:	79da      	ldrb	r2, [r3, #7]
 80016c4:	7a1b      	ldrb	r3, [r3, #8]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	431a      	orrs	r2, r3
 80016ca:	2300      	movs	r3, #0
 80016cc:	f362 030f 	bfi	r3, r2, #0, #16
 80016d0:	2102      	movs	r1, #2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fd22 	bl	800211c <MGPIO_voidSetPinDirection>

		// make data pins output
		MGPIO_voidSetPinDirection(HSSDArrayOfSSD[u8Iterator].GPIO_tPin_A, OUTPUT_SPEED_2MHZ_PP);
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	495d      	ldr	r1, [pc, #372]	; (8001850 <SSD_Init+0x1ac>)
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	785a      	ldrb	r2, [r3, #1]
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	431a      	orrs	r2, r3
 80016ec:	2300      	movs	r3, #0
 80016ee:	f362 030f 	bfi	r3, r2, #0, #16
 80016f2:	2102      	movs	r1, #2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fd11 	bl	800211c <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(HSSDArrayOfSSD[u8Iterator].GPIO_tPin_B, OUTPUT_SPEED_2MHZ_PP);
 80016fa:	79fa      	ldrb	r2, [r7, #7]
 80016fc:	4954      	ldr	r1, [pc, #336]	; (8001850 <SSD_Init+0x1ac>)
 80016fe:	4613      	mov	r3, r2
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	440b      	add	r3, r1
 8001706:	78da      	ldrb	r2, [r3, #3]
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	431a      	orrs	r2, r3
 800170e:	2300      	movs	r3, #0
 8001710:	f362 030f 	bfi	r3, r2, #0, #16
 8001714:	2102      	movs	r1, #2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fd00 	bl	800211c <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(HSSDArrayOfSSD[u8Iterator].GPIO_tPin_C, OUTPUT_SPEED_2MHZ_PP);
 800171c:	79fa      	ldrb	r2, [r7, #7]
 800171e:	494c      	ldr	r1, [pc, #304]	; (8001850 <SSD_Init+0x1ac>)
 8001720:	4613      	mov	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	440b      	add	r3, r1
 8001728:	795a      	ldrb	r2, [r3, #5]
 800172a:	799b      	ldrb	r3, [r3, #6]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	431a      	orrs	r2, r3
 8001730:	2300      	movs	r3, #0
 8001732:	f362 030f 	bfi	r3, r2, #0, #16
 8001736:	2102      	movs	r1, #2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fcef 	bl	800211c <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(HSSDArrayOfSSD[u8Iterator].GPIO_tPin_D, OUTPUT_SPEED_2MHZ_PP);
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	4943      	ldr	r1, [pc, #268]	; (8001850 <SSD_Init+0x1ac>)
 8001742:	4613      	mov	r3, r2
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	440b      	add	r3, r1
 800174a:	79da      	ldrb	r2, [r3, #7]
 800174c:	7a1b      	ldrb	r3, [r3, #8]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	431a      	orrs	r2, r3
 8001752:	2300      	movs	r3, #0
 8001754:	f362 030f 	bfi	r3, r2, #0, #16
 8001758:	2102      	movs	r1, #2
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fcde 	bl	800211c <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(HSSDArrayOfSSD[u8Iterator].GPIO_tPin_E, OUTPUT_SPEED_2MHZ_PP);
 8001760:	79fa      	ldrb	r2, [r7, #7]
 8001762:	493b      	ldr	r1, [pc, #236]	; (8001850 <SSD_Init+0x1ac>)
 8001764:	4613      	mov	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	440b      	add	r3, r1
 800176c:	3308      	adds	r3, #8
 800176e:	785a      	ldrb	r2, [r3, #1]
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	431a      	orrs	r2, r3
 8001776:	2300      	movs	r3, #0
 8001778:	f362 030f 	bfi	r3, r2, #0, #16
 800177c:	2102      	movs	r1, #2
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fccc 	bl	800211c <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(HSSDArrayOfSSD[u8Iterator].GPIO_tPin_F, OUTPUT_SPEED_2MHZ_PP);
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	4932      	ldr	r1, [pc, #200]	; (8001850 <SSD_Init+0x1ac>)
 8001788:	4613      	mov	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	440b      	add	r3, r1
 8001790:	3308      	adds	r3, #8
 8001792:	78da      	ldrb	r2, [r3, #3]
 8001794:	791b      	ldrb	r3, [r3, #4]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	431a      	orrs	r2, r3
 800179a:	2300      	movs	r3, #0
 800179c:	f362 030f 	bfi	r3, r2, #0, #16
 80017a0:	2102      	movs	r1, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fcba 	bl	800211c <MGPIO_voidSetPinDirection>
		MGPIO_voidSetPinDirection(HSSDArrayOfSSD[u8Iterator].GPIO_tPin_G, OUTPUT_SPEED_2MHZ_PP);
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	4929      	ldr	r1, [pc, #164]	; (8001850 <SSD_Init+0x1ac>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	4413      	add	r3, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	3308      	adds	r3, #8
 80017b6:	795a      	ldrb	r2, [r3, #5]
 80017b8:	799b      	ldrb	r3, [r3, #6]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	431a      	orrs	r2, r3
 80017be:	2300      	movs	r3, #0
 80017c0:	f362 030f 	bfi	r3, r2, #0, #16
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fca8 	bl	800211c <MGPIO_voidSetPinDirection>

		if(HSSDArrayOfSSD[u8Iterator].Type == COM_ANODE)
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	4920      	ldr	r1, [pc, #128]	; (8001850 <SSD_Init+0x1ac>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d112      	bne.n	8001804 <SSD_Init+0x160>
		{
			MGPIO_voidSetPinValue( HSSDArrayOfSSD[u8Iterator].GPIO_tEnablePin , HIGH);
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	491b      	ldr	r1, [pc, #108]	; (8001850 <SSD_Init+0x1ac>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	3308      	adds	r3, #8
 80017ec:	79da      	ldrb	r2, [r3, #7]
 80017ee:	7a1b      	ldrb	r3, [r3, #8]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	431a      	orrs	r2, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	f362 030f 	bfi	r3, r2, #0, #16
 80017fa:	2101      	movs	r1, #1
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fd83 	bl	8002308 <MGPIO_voidSetPinValue>
 8001802:	e01a      	b.n	800183a <SSD_Init+0x196>
		}
		else if(HSSDArrayOfSSD[u8Iterator].Type == COM_CATHODE)
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	4912      	ldr	r1, [pc, #72]	; (8001850 <SSD_Init+0x1ac>)
 8001808:	4613      	mov	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	440b      	add	r3, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d111      	bne.n	800183a <SSD_Init+0x196>
		{
			MGPIO_voidSetPinValue( HSSDArrayOfSSD[u8Iterator].GPIO_tEnablePin , LOW);
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	490d      	ldr	r1, [pc, #52]	; (8001850 <SSD_Init+0x1ac>)
 800181a:	4613      	mov	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	440b      	add	r3, r1
 8001822:	3308      	adds	r3, #8
 8001824:	79da      	ldrb	r2, [r3, #7]
 8001826:	7a1b      	ldrb	r3, [r3, #8]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	431a      	orrs	r2, r3
 800182c:	2300      	movs	r3, #0
 800182e:	f362 030f 	bfi	r3, r2, #0, #16
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fd67 	bl	8002308 <MGPIO_voidSetPinValue>
	for(u8Iterator = 0 ; u8Iterator < NUM_OF_SSD ; u8Iterator++)
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	3301      	adds	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b05      	cmp	r3, #5
 8001844:	f67f af36 	bls.w	80016b4 <SSD_Init+0x10>
		}
	}
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000030 	.word	0x20000030

08001854 <SSD_voidEnableOneDisableRest>:

void SSD_voidEnableOneDisableRest(u8 HSSD_Number)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
	u8 u8Iterator = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]

	for(u8Iterator = 0 ; u8Iterator < NUM_OF_SSD ; u8Iterator++)
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e03c      	b.n	80018e2 <SSD_voidEnableOneDisableRest+0x8e>
	{
		if(u8Iterator == HSSD_Number)
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	429a      	cmp	r2, r3
 800186e:	d119      	bne.n	80018a4 <SSD_voidEnableOneDisableRest+0x50>
		{
			MGPIO_voidSetPinValue( HSSDArrayOfSSD[u8Iterator].GPIO_tEnablePin , HSSDArrayOfSSD[u8Iterator].Type ^ LOW);
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	7bf9      	ldrb	r1, [r7, #15]
 8001874:	481e      	ldr	r0, [pc, #120]	; (80018f0 <SSD_voidEnableOneDisableRest+0x9c>)
 8001876:	460b      	mov	r3, r1
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	440b      	add	r3, r1
 800187c:	4403      	add	r3, r0
 800187e:	7818      	ldrb	r0, [r3, #0]
 8001880:	491b      	ldr	r1, [pc, #108]	; (80018f0 <SSD_voidEnableOneDisableRest+0x9c>)
 8001882:	4613      	mov	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	440b      	add	r3, r1
 800188a:	3308      	adds	r3, #8
 800188c:	79da      	ldrb	r2, [r3, #7]
 800188e:	7a1b      	ldrb	r3, [r3, #8]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	431a      	orrs	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	f362 030f 	bfi	r3, r2, #0, #16
 800189a:	4601      	mov	r1, r0
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fd33 	bl	8002308 <MGPIO_voidSetPinValue>
 80018a2:	e01b      	b.n	80018dc <SSD_voidEnableOneDisableRest+0x88>
		}
		else
		{
			MGPIO_voidSetPinValue( HSSDArrayOfSSD[u8Iterator].GPIO_tEnablePin , HSSDArrayOfSSD[u8Iterator].Type ^ HIGH);
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	7bf9      	ldrb	r1, [r7, #15]
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <SSD_voidEnableOneDisableRest+0x9c>)
 80018aa:	460b      	mov	r3, r1
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	440b      	add	r3, r1
 80018b0:	4403      	add	r3, r0
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f083 0301 	eor.w	r3, r3, #1
 80018b8:	b2d8      	uxtb	r0, r3
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <SSD_voidEnableOneDisableRest+0x9c>)
 80018bc:	4613      	mov	r3, r2
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	3308      	adds	r3, #8
 80018c6:	79da      	ldrb	r2, [r3, #7]
 80018c8:	7a1b      	ldrb	r3, [r3, #8]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	431a      	orrs	r2, r3
 80018ce:	2300      	movs	r3, #0
 80018d0:	f362 030f 	bfi	r3, r2, #0, #16
 80018d4:	4601      	mov	r1, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fd16 	bl	8002308 <MGPIO_voidSetPinValue>
	for(u8Iterator = 0 ; u8Iterator < NUM_OF_SSD ; u8Iterator++)
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	3301      	adds	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d9bf      	bls.n	8001868 <SSD_voidEnableOneDisableRest+0x14>
		}
	}
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000030 	.word	0x20000030

080018f4 <SSD_voidSendNumber>:
{
	MGPIO_voidSetPinValue( HSSDArrayOfSSD[HSSD_Number].GPIO_tEnablePin , HSSDArrayOfSSD[HSSD_Number].Type ^ HIGH);
}

void SSD_voidSendNumber( u8 HSSD_Number  , u8 Copy_u8Number )
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Arr[10]= {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101,
 8001904:	4a6c      	ldr	r2, [pc, #432]	; (8001ab8 <SSD_voidSendNumber+0x1c4>)
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	ca07      	ldmia	r2, {r0, r1, r2}
 800190c:	c303      	stmia	r3!, {r0, r1}
 800190e:	801a      	strh	r2, [r3, #0]
					   0b01111101, 0b00000111, 0b01111111, 0b01101111};

	SSD_voidClearLeds( HSSD_Number );
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f9cc 	bl	8001cb0 <SSD_voidClearLeds>

	if (HSSDArrayOfSSD[HSSD_Number].Type == COM_CATHODE )
 8001918:	79fa      	ldrb	r2, [r7, #7]
 800191a:	4968      	ldr	r1, [pc, #416]	; (8001abc <SSD_voidSendNumber+0x1c8>)
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	4413      	add	r3, r2
 8001922:	440b      	add	r3, r1
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 80ca 	bne.w	8001ac0 <SSD_voidSendNumber+0x1cc>
	{
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_A , GET_BIT(LOC_u8Arr[Copy_u8Number],0));
 800192c:	79fa      	ldrb	r2, [r7, #7]
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	f107 0118 	add.w	r1, r7, #24
 8001934:	440b      	add	r3, r1
 8001936:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	b2d8      	uxtb	r0, r3
 8001940:	495e      	ldr	r1, [pc, #376]	; (8001abc <SSD_voidSendNumber+0x1c8>)
 8001942:	4613      	mov	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	4413      	add	r3, r2
 8001948:	440b      	add	r3, r1
 800194a:	785a      	ldrb	r2, [r3, #1]
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	431a      	orrs	r2, r3
 8001952:	2300      	movs	r3, #0
 8001954:	f362 030f 	bfi	r3, r2, #0, #16
 8001958:	4601      	mov	r1, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fcd4 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_B , GET_BIT(LOC_u8Arr[Copy_u8Number],1));
 8001960:	79fa      	ldrb	r2, [r7, #7]
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	f107 0118 	add.w	r1, r7, #24
 8001968:	440b      	add	r3, r1
 800196a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	b2d8      	uxtb	r0, r3
 8001978:	4950      	ldr	r1, [pc, #320]	; (8001abc <SSD_voidSendNumber+0x1c8>)
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	4413      	add	r3, r2
 8001980:	440b      	add	r3, r1
 8001982:	78da      	ldrb	r2, [r3, #3]
 8001984:	791b      	ldrb	r3, [r3, #4]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	431a      	orrs	r2, r3
 800198a:	2300      	movs	r3, #0
 800198c:	f362 030f 	bfi	r3, r2, #0, #16
 8001990:	4601      	mov	r1, r0
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fcb8 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_C , GET_BIT(LOC_u8Arr[Copy_u8Number],2));
 8001998:	79fa      	ldrb	r2, [r7, #7]
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	f107 0118 	add.w	r1, r7, #24
 80019a0:	440b      	add	r3, r1
 80019a2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	b2d8      	uxtb	r0, r3
 80019b0:	4942      	ldr	r1, [pc, #264]	; (8001abc <SSD_voidSendNumber+0x1c8>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	795a      	ldrb	r2, [r3, #5]
 80019bc:	799b      	ldrb	r3, [r3, #6]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	431a      	orrs	r2, r3
 80019c2:	2300      	movs	r3, #0
 80019c4:	f362 030f 	bfi	r3, r2, #0, #16
 80019c8:	4601      	mov	r1, r0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fc9c 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_D , GET_BIT(LOC_u8Arr[Copy_u8Number],3));
 80019d0:	79fa      	ldrb	r2, [r7, #7]
 80019d2:	79bb      	ldrb	r3, [r7, #6]
 80019d4:	f107 0118 	add.w	r1, r7, #24
 80019d8:	440b      	add	r3, r1
 80019da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	b2d8      	uxtb	r0, r3
 80019e8:	4934      	ldr	r1, [pc, #208]	; (8001abc <SSD_voidSendNumber+0x1c8>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	4413      	add	r3, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	79da      	ldrb	r2, [r3, #7]
 80019f4:	7a1b      	ldrb	r3, [r3, #8]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	431a      	orrs	r2, r3
 80019fa:	2300      	movs	r3, #0
 80019fc:	f362 030f 	bfi	r3, r2, #0, #16
 8001a00:	4601      	mov	r1, r0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fc80 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_E , GET_BIT(LOC_u8Arr[Copy_u8Number],4));
 8001a08:	79fa      	ldrb	r2, [r7, #7]
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	f107 0118 	add.w	r1, r7, #24
 8001a10:	440b      	add	r3, r1
 8001a12:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	b2d8      	uxtb	r0, r3
 8001a20:	4926      	ldr	r1, [pc, #152]	; (8001abc <SSD_voidSendNumber+0x1c8>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	785a      	ldrb	r2, [r3, #1]
 8001a2e:	789b      	ldrb	r3, [r3, #2]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	431a      	orrs	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	f362 030f 	bfi	r3, r2, #0, #16
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fc63 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_F , GET_BIT(LOC_u8Arr[Copy_u8Number],5));
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	79bb      	ldrb	r3, [r7, #6]
 8001a46:	f107 0118 	add.w	r1, r7, #24
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	b2d8      	uxtb	r0, r3
 8001a5a:	4918      	ldr	r1, [pc, #96]	; (8001abc <SSD_voidSendNumber+0x1c8>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	3308      	adds	r3, #8
 8001a66:	78da      	ldrb	r2, [r3, #3]
 8001a68:	791b      	ldrb	r3, [r3, #4]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f362 030f 	bfi	r3, r2, #0, #16
 8001a74:	4601      	mov	r1, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fc46 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_G , GET_BIT(LOC_u8Arr[Copy_u8Number],6));
 8001a7c:	79fa      	ldrb	r2, [r7, #7]
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	f107 0118 	add.w	r1, r7, #24
 8001a84:	440b      	add	r3, r1
 8001a86:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	b2d8      	uxtb	r0, r3
 8001a94:	4909      	ldr	r1, [pc, #36]	; (8001abc <SSD_voidSendNumber+0x1c8>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	795a      	ldrb	r2, [r3, #5]
 8001aa2:	799b      	ldrb	r3, [r3, #6]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f362 030f 	bfi	r3, r2, #0, #16
 8001aae:	4601      	mov	r1, r0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fc29 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_D , !GET_BIT(LOC_u8Arr[Copy_u8Number],3));
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_E , !GET_BIT(LOC_u8Arr[Copy_u8Number],4));
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_F , !GET_BIT(LOC_u8Arr[Copy_u8Number],5));
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_G , !GET_BIT(LOC_u8Arr[Copy_u8Number],6));
	}
}
 8001ab6:	e0f5      	b.n	8001ca4 <SSD_voidSendNumber+0x3b0>
 8001ab8:	0800289c 	.word	0x0800289c
 8001abc:	20000030 	.word	0x20000030
	else if (HSSDArrayOfSSD[HSSD_Number].Type == COM_ANODE )
 8001ac0:	79fa      	ldrb	r2, [r7, #7]
 8001ac2:	497a      	ldr	r1, [pc, #488]	; (8001cac <SSD_voidSendNumber+0x3b8>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 80e8 	bne.w	8001ca4 <SSD_voidSendNumber+0x3b0>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_A , !GET_BIT(LOC_u8Arr[Copy_u8Number],0));
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	f107 0118 	add.w	r1, r7, #24
 8001adc:	440b      	add	r3, r1
 8001ade:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf0c      	ite	eq
 8001aea:	2301      	moveq	r3, #1
 8001aec:	2300      	movne	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	496e      	ldr	r1, [pc, #440]	; (8001cac <SSD_voidSendNumber+0x3b8>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	4413      	add	r3, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	785a      	ldrb	r2, [r3, #1]
 8001afe:	789b      	ldrb	r3, [r3, #2]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	431a      	orrs	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	f362 030f 	bfi	r3, r2, #0, #16
 8001b0a:	4601      	mov	r1, r0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fbfb 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_B , !GET_BIT(LOC_u8Arr[Copy_u8Number],1));
 8001b12:	79fa      	ldrb	r2, [r7, #7]
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	f107 0118 	add.w	r1, r7, #24
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	495d      	ldr	r1, [pc, #372]	; (8001cac <SSD_voidSendNumber+0x3b8>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	78da      	ldrb	r2, [r3, #3]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	431a      	orrs	r2, r3
 8001b46:	2300      	movs	r3, #0
 8001b48:	f362 030f 	bfi	r3, r2, #0, #16
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fbda 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_C , !GET_BIT(LOC_u8Arr[Copy_u8Number],2));
 8001b54:	79fa      	ldrb	r2, [r7, #7]
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	f107 0118 	add.w	r1, r7, #24
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	494d      	ldr	r1, [pc, #308]	; (8001cac <SSD_voidSendNumber+0x3b8>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	795a      	ldrb	r2, [r3, #5]
 8001b82:	799b      	ldrb	r3, [r3, #6]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	431a      	orrs	r2, r3
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f362 030f 	bfi	r3, r2, #0, #16
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fbb9 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_D , !GET_BIT(LOC_u8Arr[Copy_u8Number],3));
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	79bb      	ldrb	r3, [r7, #6]
 8001b9a:	f107 0118 	add.w	r1, r7, #24
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	493c      	ldr	r1, [pc, #240]	; (8001cac <SSD_voidSendNumber+0x3b8>)
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	4413      	add	r3, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	79da      	ldrb	r2, [r3, #7]
 8001bc4:	7a1b      	ldrb	r3, [r3, #8]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f362 030f 	bfi	r3, r2, #0, #16
 8001bd0:	4601      	mov	r1, r0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fb98 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_E , !GET_BIT(LOC_u8Arr[Copy_u8Number],4));
 8001bd8:	79fa      	ldrb	r2, [r7, #7]
 8001bda:	79bb      	ldrb	r3, [r7, #6]
 8001bdc:	f107 0118 	add.w	r1, r7, #24
 8001be0:	440b      	add	r3, r1
 8001be2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2301      	moveq	r3, #1
 8001bf4:	2300      	movne	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	492c      	ldr	r1, [pc, #176]	; (8001cac <SSD_voidSendNumber+0x3b8>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	4413      	add	r3, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	3308      	adds	r3, #8
 8001c06:	785a      	ldrb	r2, [r3, #1]
 8001c08:	789b      	ldrb	r3, [r3, #2]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f362 030f 	bfi	r3, r2, #0, #16
 8001c14:	4601      	mov	r1, r0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fb76 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_F , !GET_BIT(LOC_u8Arr[Copy_u8Number],5));
 8001c1c:	79fa      	ldrb	r2, [r7, #7]
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	f107 0118 	add.w	r1, r7, #24
 8001c24:	440b      	add	r3, r1
 8001c26:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	491b      	ldr	r1, [pc, #108]	; (8001cac <SSD_voidSendNumber+0x3b8>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	3308      	adds	r3, #8
 8001c4a:	78da      	ldrb	r2, [r3, #3]
 8001c4c:	791b      	ldrb	r3, [r3, #4]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	431a      	orrs	r2, r3
 8001c52:	2300      	movs	r3, #0
 8001c54:	f362 030f 	bfi	r3, r2, #0, #16
 8001c58:	4601      	mov	r1, r0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fb54 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_G , !GET_BIT(LOC_u8Arr[Copy_u8Number],6));
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	79bb      	ldrb	r3, [r7, #6]
 8001c64:	f107 0118 	add.w	r1, r7, #24
 8001c68:	440b      	add	r3, r1
 8001c6a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	490a      	ldr	r1, [pc, #40]	; (8001cac <SSD_voidSendNumber+0x3b8>)
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	795a      	ldrb	r2, [r3, #5]
 8001c90:	799b      	ldrb	r3, [r3, #6]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	431a      	orrs	r2, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	f362 030f 	bfi	r3, r2, #0, #16
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fb32 	bl	8002308 <MGPIO_voidSetPinValue>
}
 8001ca4:	bf00      	nop
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000030 	.word	0x20000030

08001cb0 <SSD_voidClearLeds>:

void SSD_voidClearLeds( u8 HSSD_Number )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	if (HSSDArrayOfSSD[HSSD_Number].Type == COM_CATHODE )
 8001cba:	79fa      	ldrb	r2, [r7, #7]
 8001cbc:	4984      	ldr	r1, [pc, #528]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4413      	add	r3, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d17a      	bne.n	8001dc2 <SSD_voidClearLeds+0x112>
	{
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_A , LOW);
 8001ccc:	79fa      	ldrb	r2, [r7, #7]
 8001cce:	4980      	ldr	r1, [pc, #512]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	785a      	ldrb	r2, [r3, #1]
 8001cda:	789b      	ldrb	r3, [r3, #2]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f362 030f 	bfi	r3, r2, #0, #16
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fb0d 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_B , LOW);
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	4977      	ldr	r1, [pc, #476]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	4413      	add	r3, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	78da      	ldrb	r2, [r3, #3]
 8001cfc:	791b      	ldrb	r3, [r3, #4]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	431a      	orrs	r2, r3
 8001d02:	2300      	movs	r3, #0
 8001d04:	f362 030f 	bfi	r3, r2, #0, #16
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fafc 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_C , LOW);
 8001d10:	79fa      	ldrb	r2, [r7, #7]
 8001d12:	496f      	ldr	r1, [pc, #444]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	795a      	ldrb	r2, [r3, #5]
 8001d1e:	799b      	ldrb	r3, [r3, #6]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	431a      	orrs	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	f362 030f 	bfi	r3, r2, #0, #16
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 faeb 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_D , LOW);
 8001d32:	79fa      	ldrb	r2, [r7, #7]
 8001d34:	4966      	ldr	r1, [pc, #408]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	79da      	ldrb	r2, [r3, #7]
 8001d40:	7a1b      	ldrb	r3, [r3, #8]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	431a      	orrs	r2, r3
 8001d46:	2300      	movs	r3, #0
 8001d48:	f362 030f 	bfi	r3, r2, #0, #16
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fada 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_E , LOW);
 8001d54:	79fa      	ldrb	r2, [r7, #7]
 8001d56:	495e      	ldr	r1, [pc, #376]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3308      	adds	r3, #8
 8001d62:	785a      	ldrb	r2, [r3, #1]
 8001d64:	789b      	ldrb	r3, [r3, #2]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f362 030f 	bfi	r3, r2, #0, #16
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fac8 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_F , LOW);
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	4955      	ldr	r1, [pc, #340]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	3308      	adds	r3, #8
 8001d86:	78da      	ldrb	r2, [r3, #3]
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f362 030f 	bfi	r3, r2, #0, #16
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fab6 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_G , LOW);
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	494c      	ldr	r1, [pc, #304]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	3308      	adds	r3, #8
 8001daa:	795a      	ldrb	r2, [r3, #5]
 8001dac:	799b      	ldrb	r3, [r3, #6]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	431a      	orrs	r2, r3
 8001db2:	2300      	movs	r3, #0
 8001db4:	f362 030f 	bfi	r3, r2, #0, #16
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 faa4 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_D , HIGH);
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_E , HIGH);
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_F , HIGH);
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_G , HIGH);
	}
}
 8001dc0:	e082      	b.n	8001ec8 <SSD_voidClearLeds+0x218>
	else if (HSSDArrayOfSSD[HSSD_Number].Type == COM_ANODE )
 8001dc2:	79fa      	ldrb	r2, [r7, #7]
 8001dc4:	4942      	ldr	r1, [pc, #264]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	4413      	add	r3, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d179      	bne.n	8001ec8 <SSD_voidClearLeds+0x218>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_A , HIGH);
 8001dd4:	79fa      	ldrb	r2, [r7, #7]
 8001dd6:	493e      	ldr	r1, [pc, #248]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001dd8:	4613      	mov	r3, r2
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	4413      	add	r3, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	785a      	ldrb	r2, [r3, #1]
 8001de2:	789b      	ldrb	r3, [r3, #2]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	431a      	orrs	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	f362 030f 	bfi	r3, r2, #0, #16
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fa89 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_B , HIGH);
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4935      	ldr	r1, [pc, #212]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	4413      	add	r3, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	78da      	ldrb	r2, [r3, #3]
 8001e04:	791b      	ldrb	r3, [r3, #4]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f362 030f 	bfi	r3, r2, #0, #16
 8001e10:	2101      	movs	r1, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fa78 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_C , HIGH);
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	492d      	ldr	r1, [pc, #180]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	795a      	ldrb	r2, [r3, #5]
 8001e26:	799b      	ldrb	r3, [r3, #6]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f362 030f 	bfi	r3, r2, #0, #16
 8001e32:	2101      	movs	r1, #1
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fa67 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_D , HIGH);
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	4924      	ldr	r1, [pc, #144]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	4413      	add	r3, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	79da      	ldrb	r2, [r3, #7]
 8001e48:	7a1b      	ldrb	r3, [r3, #8]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f362 030f 	bfi	r3, r2, #0, #16
 8001e54:	2101      	movs	r1, #1
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fa56 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_E , HIGH);
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	491c      	ldr	r1, [pc, #112]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	4413      	add	r3, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	3308      	adds	r3, #8
 8001e6a:	785a      	ldrb	r2, [r3, #1]
 8001e6c:	789b      	ldrb	r3, [r3, #2]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	431a      	orrs	r2, r3
 8001e72:	2300      	movs	r3, #0
 8001e74:	f362 030f 	bfi	r3, r2, #0, #16
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fa44 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_F , HIGH);
 8001e80:	79fa      	ldrb	r2, [r7, #7]
 8001e82:	4913      	ldr	r1, [pc, #76]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4413      	add	r3, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	78da      	ldrb	r2, [r3, #3]
 8001e90:	791b      	ldrb	r3, [r3, #4]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	431a      	orrs	r2, r3
 8001e96:	2300      	movs	r3, #0
 8001e98:	f362 030f 	bfi	r3, r2, #0, #16
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fa32 	bl	8002308 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(HSSDArrayOfSSD[HSSD_Number].GPIO_tPin_G , HIGH);
 8001ea4:	79fa      	ldrb	r2, [r7, #7]
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <SSD_voidClearLeds+0x220>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	795a      	ldrb	r2, [r3, #5]
 8001eb4:	799b      	ldrb	r3, [r3, #6]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f362 030f 	bfi	r3, r2, #0, #16
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fa20 	bl	8002308 <MGPIO_voidSetPinValue>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000030 	.word	0x20000030

08001ed4 <AFIO_voidSetEXTIConfiguration>:

/* Module includes */


void AFIO_voidSetEXTIConfiguration(u8 Copy_u8EXTI_Line ,u8 Copy_u8PortMap)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	460a      	mov	r2, r1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71bb      	strb	r3, [r7, #6]
	
	u8 LOC_u8RegIndex = Copy_u8EXTI_Line / 4;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	73fb      	strb	r3, [r7, #15]

	Copy_u8EXTI_Line = Copy_u8EXTI_Line % 4;
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	71fb      	strb	r3, [r7, #7]
	/* Clear the four bits first */
	AFIO_Ptr -> EXTICRx[LOC_u8RegIndex] &= ~(( 0b1111) << (Copy_u8EXTI_Line * 4));
 8001ef2:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <AFIO_voidSetEXTIConfiguration+0x70>)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	210f      	movs	r1, #15
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	490e      	ldr	r1, [pc, #56]	; (8001f44 <AFIO_voidSetEXTIConfiguration+0x70>)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	4002      	ands	r2, r0
 8001f10:	3302      	adds	r3, #2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Write into the four bits */
	AFIO_Ptr -> EXTICRx[LOC_u8RegIndex] |= (Copy_u8PortMap) << (Copy_u8EXTI_Line * 4);
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <AFIO_voidSetEXTIConfiguration+0x70>)
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f20:	79b9      	ldrb	r1, [r7, #6]
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4905      	ldr	r1, [pc, #20]	; (8001f44 <AFIO_voidSetEXTIConfiguration+0x70>)
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	4302      	orrs	r2, r0
 8001f32:	3302      	adds	r3, #2
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010000 	.word	0x40010000

08001f48 <MEXTI_voidInit>:

static void (* EXTI_CallBack[16]) (void) ;

/* EXTI Preprossing Signal Latch Initialization, cannot be configured during run time */
void MEXTI_voidInit(u8 Copy_u8EXILine, u8 Copy_u8EXIMode)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460a      	mov	r2, r1
 8001f52:	71fb      	strb	r3, [r7, #7]
 8001f54:	4613      	mov	r3, r2
 8001f56:	71bb      	strb	r3, [r7, #6]
    switch(Copy_u8EXIMode)
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d00e      	beq.n	8001f7c <MEXTI_voidInit+0x34>
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d017      	beq.n	8001f92 <MEXTI_voidInit+0x4a>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d12a      	bne.n	8001fbc <MEXTI_voidInit+0x74>
	{
		case RISING_EDGE:
			SET_BIT(EXTI_Ptr -> EXTI_RTSR , Copy_u8EXILine); break;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	79fa      	ldrb	r2, [r7, #7]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	4611      	mov	r1, r2
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001f76:	430b      	orrs	r3, r1
 8001f78:	6093      	str	r3, [r2, #8]
 8001f7a:	e01f      	b.n	8001fbc <MEXTI_voidInit+0x74>
		case FALLING_EDGE:
			SET_BIT(EXTI_Ptr -> EXTI_FTSR , Copy_u8EXILine); break;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	79fa      	ldrb	r2, [r7, #7]
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f202 	lsl.w	r2, r1, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	60d3      	str	r3, [r2, #12]
 8001f90:	e014      	b.n	8001fbc <MEXTI_voidInit+0x74>
		case ON_CHANGE:
			SET_BIT(EXTI_Ptr -> EXTI_RTSR , Copy_u8EXILine);
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI_Ptr -> EXTI_FTSR , Copy_u8EXILine); break;
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	79fa      	ldrb	r2, [r7, #7]
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	60d3      	str	r3, [r2, #12]
 8001fba:	bf00      	nop
	}
	SET_BIT(EXTI_Ptr -> EXTI_IMR , Copy_u8EXILine); /* Enable EXTI */
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	79fa      	ldrb	r2, [r7, #7]
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <MEXTI_voidInit+0x94>)
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <MEXTI_voidEnableEXTI>:

/* Enable EXTI on Linex */
void MEXTI_voidEnableEXTI(u8 Copy_u8EXTILine)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
     SET_BIT(EXTI_Ptr -> EXTI_IMR , Copy_u8EXTILine);
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <MEXTI_voidEnableEXTI+0x28>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	79fa      	ldrb	r2, [r7, #7]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4a03      	ldr	r2, [pc, #12]	; (8002008 <MEXTI_voidEnableEXTI+0x28>)
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	6013      	str	r3, [r2, #0]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40010400 	.word	0x40010400

0800200c <MEXTI_voidSetCallBack>:
     SET_BIT(EXTI_Ptr -> EXTI_SWIER , Copy_u8EXTILine);
}

/* This function is being called in main.c to hold an address of another function that have the ISR written by user */
void MEXTI_voidSetCallBack(void (*ptr) (void), u8 Copy_u8EXTILine)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
    /* Since the function is being passed to CB function is local we use the global varible "pointer to function" 
        to assign to it the address of the ISR function passed to CallBack function */
    switch(Copy_u8EXTILine)
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	d852      	bhi.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <MEXTI_voidSetCallBack+0x18>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002065 	.word	0x08002065
 8002028:	0800206d 	.word	0x0800206d
 800202c:	08002075 	.word	0x08002075
 8002030:	0800207d 	.word	0x0800207d
 8002034:	08002085 	.word	0x08002085
 8002038:	0800208d 	.word	0x0800208d
 800203c:	0800208d 	.word	0x0800208d
 8002040:	0800208d 	.word	0x0800208d
 8002044:	0800208d 	.word	0x0800208d
 8002048:	0800208d 	.word	0x0800208d
 800204c:	08002095 	.word	0x08002095
 8002050:	0800209d 	.word	0x0800209d
 8002054:	080020a5 	.word	0x080020a5
 8002058:	080020ad 	.word	0x080020ad
 800205c:	080020b5 	.word	0x080020b5
 8002060:	080020bd 	.word	0x080020bd
	{
		case LINE0:
			EXTI_CallBack[0] = ptr;
 8002064:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
			break;
 800206a:	e02b      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE1:
			EXTI_CallBack[1] = ptr;
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6053      	str	r3, [r2, #4]
			break;
 8002072:	e027      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE2:
			EXTI_CallBack[2] = ptr;
 8002074:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6093      	str	r3, [r2, #8]
			break;
 800207a:	e023      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE3:
			EXTI_CallBack[3] = ptr;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60d3      	str	r3, [r2, #12]
			break;
 8002082:	e01f      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE4:
			EXTI_CallBack[4] = ptr;
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6113      	str	r3, [r2, #16]
			break;
 800208a:	e01b      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE5:
		case LINE6:
		case LINE7:
		case LINE8:
		case LINE9:
			EXTI_CallBack[5] = ptr;
 800208c:	4a10      	ldr	r2, [pc, #64]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6153      	str	r3, [r2, #20]
			break;
 8002092:	e017      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE10:
			EXTI_CallBack[10] = ptr;
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6293      	str	r3, [r2, #40]	; 0x28
			break;
 800209a:	e013      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE11:
			EXTI_CallBack[11] = ptr;
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 80020a2:	e00f      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE12:
			EXTI_CallBack[12] = ptr;
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 80020aa:	e00b      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE13:
			EXTI_CallBack[13] = ptr;
 80020ac:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80020b2:	e007      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE14:
			EXTI_CallBack[14] = ptr;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 80020ba:	e003      	b.n	80020c4 <MEXTI_voidSetCallBack+0xb8>
		case LINE15:
			EXTI_CallBack[15] = ptr;
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <MEXTI_voidSetCallBack+0xc4>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;	
 80020c2:	bf00      	nop
	}
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200000d0 	.word	0x200000d0

080020d4 <EXTI0_IRQHandler>:

/* EXI 0 IRQ Handler */
void EXTI0_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
    EXTI_CallBack[0]();
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <EXTI0_IRQHandler+0x1c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4798      	blx	r3
    // Clear pending bit of EXTI0 by setting it to 1
    SET_BIT(EXTI_Ptr -> EXTI_PR , 0);
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <EXTI0_IRQHandler+0x20>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <EXTI0_IRQHandler+0x20>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6153      	str	r3, [r2, #20]
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200000d0 	.word	0x200000d0
 80020f4:	40010400 	.word	0x40010400

080020f8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
    EXTI_CallBack[5]();
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <EXTI9_5_IRQHandler+0x1c>)
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	4798      	blx	r3
    // Clear pending bit of EXTI0 by setting it to 1
    SET_BIT(EXTI_Ptr -> EXTI_PR , 0);
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <EXTI9_5_IRQHandler+0x20>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <EXTI9_5_IRQHandler+0x20>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6153      	str	r3, [r2, #20]
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200000d0 	.word	0x200000d0
 8002118:	40010400 	.word	0x40010400

0800211c <MGPIO_voidSetPinDirection>:
#include <MCAL/GPIO_private.h>


            /* ------ Function that sets the pin "mode and configuration" ------- */
void MGPIO_voidSetPinDirection(GPIO_t Copy_GPIO_Pin , u8 Copy_u8Mode)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	80b8      	strh	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]

    switch (Copy_GPIO_Pin.GPIO_Port)
 8002128:	797b      	ldrb	r3, [r7, #5]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d04d      	beq.n	80021ca <MGPIO_voidSetPinDirection+0xae>
 800212e:	2b02      	cmp	r3, #2
 8002130:	f000 8092 	beq.w	8002258 <MGPIO_voidSetPinDirection+0x13c>
 8002134:	2b00      	cmp	r3, #0
 8002136:	d000      	beq.n	800213a <MGPIO_voidSetPinDirection+0x1e>
                            MGPIOC -> CRH |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
                        }
                    break;

        default : /* just to avoid any compiler errors */ 
                    break;
 8002138:	e0da      	b.n	80022f0 <MGPIO_voidSetPinDirection+0x1d4>
            		if(Copy_u8Mode == INPUT_PULL_UP_OR_DOWN)
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d109      	bne.n	8002154 <MGPIO_voidSetPinDirection+0x38>
            			SET_BIT(MGPIOA->ODR,Copy_GPIO_Pin.GPIO_Pin);
 8002140:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	793a      	ldrb	r2, [r7, #4]
 8002146:	4611      	mov	r1, r2
 8002148:	2201      	movs	r2, #1
 800214a:	408a      	lsls	r2, r1
 800214c:	4611      	mov	r1, r2
 800214e:	4a6b      	ldr	r2, [pc, #428]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 8002150:	430b      	orrs	r3, r1
 8002152:	60d3      	str	r3, [r2, #12]
                    if (Copy_GPIO_Pin.GPIO_Pin <= 7 && Copy_GPIO_Pin.GPIO_Pin >= 0)
 8002154:	793b      	ldrb	r3, [r7, #4]
 8002156:	2b07      	cmp	r3, #7
 8002158:	d817      	bhi.n	800218a <MGPIO_voidSetPinDirection+0x6e>
                            MGPIOA -> CRL &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 800215a:	4b68      	ldr	r3, [pc, #416]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	793a      	ldrb	r2, [r7, #4]
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	210f      	movs	r1, #15
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	43d2      	mvns	r2, r2
 800216a:	4611      	mov	r1, r2
 800216c:	4a63      	ldr	r2, [pc, #396]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 800216e:	400b      	ands	r3, r1
 8002170:	6013      	str	r3, [r2, #0]
                            MGPIOA -> CRL |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8002172:	4b62      	ldr	r3, [pc, #392]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78f9      	ldrb	r1, [r7, #3]
 8002178:	793a      	ldrb	r2, [r7, #4]
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4611      	mov	r1, r2
 8002182:	4a5e      	ldr	r2, [pc, #376]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 8002184:	430b      	orrs	r3, r1
 8002186:	6013      	str	r3, [r2, #0]
                    break;
 8002188:	e0ad      	b.n	80022e6 <MGPIO_voidSetPinDirection+0x1ca>
                    else if (Copy_GPIO_Pin.GPIO_Pin <= 15)
 800218a:	793b      	ldrb	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	f200 80aa 	bhi.w	80022e6 <MGPIO_voidSetPinDirection+0x1ca>
                    		Copy_GPIO_Pin.GPIO_Pin = Copy_GPIO_Pin.GPIO_Pin - 8;
 8002192:	793b      	ldrb	r3, [r7, #4]
 8002194:	3b08      	subs	r3, #8
 8002196:	b2db      	uxtb	r3, r3
 8002198:	713b      	strb	r3, [r7, #4]
                            MGPIOA -> CRH &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 800219a:	4b58      	ldr	r3, [pc, #352]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	793a      	ldrb	r2, [r7, #4]
 80021a0:	0092      	lsls	r2, r2, #2
 80021a2:	210f      	movs	r1, #15
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	43d2      	mvns	r2, r2
 80021aa:	4611      	mov	r1, r2
 80021ac:	4a53      	ldr	r2, [pc, #332]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 80021ae:	400b      	ands	r3, r1
 80021b0:	6053      	str	r3, [r2, #4]
                            MGPIOA -> CRH |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 80021b2:	4b52      	ldr	r3, [pc, #328]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	78f9      	ldrb	r1, [r7, #3]
 80021b8:	793a      	ldrb	r2, [r7, #4]
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4611      	mov	r1, r2
 80021c2:	4a4e      	ldr	r2, [pc, #312]	; (80022fc <MGPIO_voidSetPinDirection+0x1e0>)
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6053      	str	r3, [r2, #4]
                    break;
 80021c8:	e08d      	b.n	80022e6 <MGPIO_voidSetPinDirection+0x1ca>
            		if(Copy_u8Mode == INPUT_PULL_UP_OR_DOWN)
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d109      	bne.n	80021e4 <MGPIO_voidSetPinDirection+0xc8>
            			SET_BIT(MGPIOB->ODR,Copy_GPIO_Pin.GPIO_Pin);
 80021d0:	4b4b      	ldr	r3, [pc, #300]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	793a      	ldrb	r2, [r7, #4]
 80021d6:	4611      	mov	r1, r2
 80021d8:	2201      	movs	r2, #1
 80021da:	408a      	lsls	r2, r1
 80021dc:	4611      	mov	r1, r2
 80021de:	4a48      	ldr	r2, [pc, #288]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 80021e0:	430b      	orrs	r3, r1
 80021e2:	60d3      	str	r3, [r2, #12]
                    if (Copy_GPIO_Pin.GPIO_Pin <= 7 && Copy_GPIO_Pin.GPIO_Pin >= 0)
 80021e4:	793b      	ldrb	r3, [r7, #4]
 80021e6:	2b07      	cmp	r3, #7
 80021e8:	d817      	bhi.n	800221a <MGPIO_voidSetPinDirection+0xfe>
                            MGPIOB -> CRL &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 80021ea:	4b45      	ldr	r3, [pc, #276]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	793a      	ldrb	r2, [r7, #4]
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	210f      	movs	r1, #15
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	43d2      	mvns	r2, r2
 80021fa:	4611      	mov	r1, r2
 80021fc:	4a40      	ldr	r2, [pc, #256]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 80021fe:	400b      	ands	r3, r1
 8002200:	6013      	str	r3, [r2, #0]
                            MGPIOB -> CRL |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	78f9      	ldrb	r1, [r7, #3]
 8002208:	793a      	ldrb	r2, [r7, #4]
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	4611      	mov	r1, r2
 8002212:	4a3b      	ldr	r2, [pc, #236]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 8002214:	430b      	orrs	r3, r1
 8002216:	6013      	str	r3, [r2, #0]
                    break;
 8002218:	e067      	b.n	80022ea <MGPIO_voidSetPinDirection+0x1ce>
                    else if (Copy_GPIO_Pin.GPIO_Pin <= 15)
 800221a:	793b      	ldrb	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d864      	bhi.n	80022ea <MGPIO_voidSetPinDirection+0x1ce>
                    		Copy_GPIO_Pin.GPIO_Pin = Copy_GPIO_Pin.GPIO_Pin - 8;
 8002220:	793b      	ldrb	r3, [r7, #4]
 8002222:	3b08      	subs	r3, #8
 8002224:	b2db      	uxtb	r3, r3
 8002226:	713b      	strb	r3, [r7, #4]
                            MGPIOB -> CRH &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	793a      	ldrb	r2, [r7, #4]
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	210f      	movs	r1, #15
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	43d2      	mvns	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4a31      	ldr	r2, [pc, #196]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 800223c:	400b      	ands	r3, r1
 800223e:	6053      	str	r3, [r2, #4]
                            MGPIOB -> CRH |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	78f9      	ldrb	r1, [r7, #3]
 8002246:	793a      	ldrb	r2, [r7, #4]
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	fa01 f202 	lsl.w	r2, r1, r2
 800224e:	4611      	mov	r1, r2
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <MGPIO_voidSetPinDirection+0x1e4>)
 8002252:	430b      	orrs	r3, r1
 8002254:	6053      	str	r3, [r2, #4]
                    break;
 8002256:	e048      	b.n	80022ea <MGPIO_voidSetPinDirection+0x1ce>
            		if(Copy_u8Mode == INPUT_PULL_UP_OR_DOWN)
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	2b08      	cmp	r3, #8
 800225c:	d109      	bne.n	8002272 <MGPIO_voidSetPinDirection+0x156>
            			SET_BIT(MGPIOC->ODR,Copy_GPIO_Pin.GPIO_Pin);
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	793a      	ldrb	r2, [r7, #4]
 8002264:	4611      	mov	r1, r2
 8002266:	2201      	movs	r2, #1
 8002268:	408a      	lsls	r2, r1
 800226a:	4611      	mov	r1, r2
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 800226e:	430b      	orrs	r3, r1
 8002270:	60d3      	str	r3, [r2, #12]
                    if (Copy_GPIO_Pin.GPIO_Pin <= 7 && Copy_GPIO_Pin.GPIO_Pin >= 0)
 8002272:	793b      	ldrb	r3, [r7, #4]
 8002274:	2b07      	cmp	r3, #7
 8002276:	d817      	bhi.n	80022a8 <MGPIO_voidSetPinDirection+0x18c>
                            MGPIOC -> CRL &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8002278:	4b22      	ldr	r3, [pc, #136]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	793a      	ldrb	r2, [r7, #4]
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	210f      	movs	r1, #15
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	43d2      	mvns	r2, r2
 8002288:	4611      	mov	r1, r2
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 800228c:	400b      	ands	r3, r1
 800228e:	6013      	str	r3, [r2, #0]
                            MGPIOC -> CRL |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	78f9      	ldrb	r1, [r7, #3]
 8002296:	793a      	ldrb	r2, [r7, #4]
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	4611      	mov	r1, r2
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 80022a2:	430b      	orrs	r3, r1
 80022a4:	6013      	str	r3, [r2, #0]
                    break;
 80022a6:	e022      	b.n	80022ee <MGPIO_voidSetPinDirection+0x1d2>
                    else if (Copy_GPIO_Pin.GPIO_Pin <= 15)
 80022a8:	793b      	ldrb	r3, [r7, #4]
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	d81f      	bhi.n	80022ee <MGPIO_voidSetPinDirection+0x1d2>
                    		Copy_GPIO_Pin.GPIO_Pin = Copy_GPIO_Pin.GPIO_Pin - 8;
 80022ae:	793b      	ldrb	r3, [r7, #4]
 80022b0:	3b08      	subs	r3, #8
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	713b      	strb	r3, [r7, #4]
                            MGPIOC -> CRH &= ~ ((0b1111) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	793a      	ldrb	r2, [r7, #4]
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	210f      	movs	r1, #15
 80022c0:	fa01 f202 	lsl.w	r2, r1, r2
 80022c4:	43d2      	mvns	r2, r2
 80022c6:	4611      	mov	r1, r2
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	6053      	str	r3, [r2, #4]
                            MGPIOC -> CRH |=   ((Copy_u8Mode) << (Copy_GPIO_Pin.GPIO_Pin * 4));
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	78f9      	ldrb	r1, [r7, #3]
 80022d4:	793a      	ldrb	r2, [r7, #4]
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	4611      	mov	r1, r2
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <MGPIO_voidSetPinDirection+0x1e8>)
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6053      	str	r3, [r2, #4]
                    break;
 80022e4:	e003      	b.n	80022ee <MGPIO_voidSetPinDirection+0x1d2>
                    break;
 80022e6:	bf00      	nop
 80022e8:	e002      	b.n	80022f0 <MGPIO_voidSetPinDirection+0x1d4>
                    break;
 80022ea:	bf00      	nop
 80022ec:	e000      	b.n	80022f0 <MGPIO_voidSetPinDirection+0x1d4>
                    break;
 80022ee:	bf00      	nop
    }
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010800 	.word	0x40010800
 8002300:	40010c00 	.word	0x40010c00
 8002304:	40011000 	.word	0x40011000

08002308 <MGPIO_voidSetPinValue>:

                  /* ----- Function that sets the pin value either "High or Low" ------- */
    /* To speed up the GPIO Set Pin Value Function, I've used BSRR & BRR registers to reduce processing cycles */
void MGPIO_voidSetPinValue(GPIO_t Copy_GPIO_Pin , u8 Copy_u8VALUE)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	80b8      	strh	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
    switch (Copy_GPIO_Pin.GPIO_Port)
 8002314:	797b      	ldrb	r3, [r7, #5]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d01a      	beq.n	8002350 <MGPIO_voidSetPinValue+0x48>
 800231a:	2b02      	cmp	r3, #2
 800231c:	d02e      	beq.n	800237c <MGPIO_voidSetPinValue+0x74>
 800231e:	2b00      	cmp	r3, #0
 8002320:	d000      	beq.n	8002324 <MGPIO_voidSetPinValue+0x1c>
                            MGPIOC -> BRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
                        }
                    break;

        default : /* just to avoid any compiler errors */ 
                    break;
 8002322:	e046      	b.n	80023b2 <MGPIO_voidSetPinValue+0xaa>
                    if (Copy_u8VALUE == HIGH) 
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <MGPIO_voidSetPinValue+0x32>
                            MGPIOA -> BSRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 800232a:	793b      	ldrb	r3, [r7, #4]
 800232c:	461a      	mov	r2, r3
 800232e:	2301      	movs	r3, #1
 8002330:	fa03 f202 	lsl.w	r2, r3, r2
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <MGPIO_voidSetPinValue+0xb4>)
 8002336:	611a      	str	r2, [r3, #16]
                    break;
 8002338:	e036      	b.n	80023a8 <MGPIO_voidSetPinValue+0xa0>
                    else if (Copy_u8VALUE == LOW)
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d133      	bne.n	80023a8 <MGPIO_voidSetPinValue+0xa0>
                            MGPIOA -> BRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8002340:	793b      	ldrb	r3, [r7, #4]
 8002342:	461a      	mov	r2, r3
 8002344:	2301      	movs	r3, #1
 8002346:	fa03 f202 	lsl.w	r2, r3, r2
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MGPIO_voidSetPinValue+0xb4>)
 800234c:	615a      	str	r2, [r3, #20]
                    break;
 800234e:	e02b      	b.n	80023a8 <MGPIO_voidSetPinValue+0xa0>
                    if (Copy_u8VALUE == HIGH) 
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <MGPIO_voidSetPinValue+0x5e>
                            MGPIOB -> BSRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8002356:	793b      	ldrb	r3, [r7, #4]
 8002358:	461a      	mov	r2, r3
 800235a:	2301      	movs	r3, #1
 800235c:	fa03 f202 	lsl.w	r2, r3, r2
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <MGPIO_voidSetPinValue+0xb8>)
 8002362:	611a      	str	r2, [r3, #16]
                    break;
 8002364:	e022      	b.n	80023ac <MGPIO_voidSetPinValue+0xa4>
                    else if (Copy_u8VALUE == LOW)
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d11f      	bne.n	80023ac <MGPIO_voidSetPinValue+0xa4>
                            MGPIOB -> BRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 800236c:	793b      	ldrb	r3, [r7, #4]
 800236e:	461a      	mov	r2, r3
 8002370:	2301      	movs	r3, #1
 8002372:	fa03 f202 	lsl.w	r2, r3, r2
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <MGPIO_voidSetPinValue+0xb8>)
 8002378:	615a      	str	r2, [r3, #20]
                    break;
 800237a:	e017      	b.n	80023ac <MGPIO_voidSetPinValue+0xa4>
                    if (Copy_u8VALUE == HIGH) 
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <MGPIO_voidSetPinValue+0x8a>
                            MGPIOC -> BSRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8002382:	793b      	ldrb	r3, [r7, #4]
 8002384:	461a      	mov	r2, r3
 8002386:	2301      	movs	r3, #1
 8002388:	fa03 f202 	lsl.w	r2, r3, r2
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <MGPIO_voidSetPinValue+0xbc>)
 800238e:	611a      	str	r2, [r3, #16]
                    break;
 8002390:	e00e      	b.n	80023b0 <MGPIO_voidSetPinValue+0xa8>
                    else if (Copy_u8VALUE == LOW)
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <MGPIO_voidSetPinValue+0xa8>
                            MGPIOC -> BRR = (1 << Copy_GPIO_Pin.GPIO_Pin);
 8002398:	793b      	ldrb	r3, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	2301      	movs	r3, #1
 800239e:	fa03 f202 	lsl.w	r2, r3, r2
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MGPIO_voidSetPinValue+0xbc>)
 80023a4:	615a      	str	r2, [r3, #20]
                    break;
 80023a6:	e003      	b.n	80023b0 <MGPIO_voidSetPinValue+0xa8>
                    break;
 80023a8:	bf00      	nop
 80023aa:	e002      	b.n	80023b2 <MGPIO_voidSetPinValue+0xaa>
                    break;
 80023ac:	bf00      	nop
 80023ae:	e000      	b.n	80023b2 <MGPIO_voidSetPinValue+0xaa>
                    break;
 80023b0:	bf00      	nop
    }

}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40010800 	.word	0x40010800
 80023c0:	40010c00 	.word	0x40010c00
 80023c4:	40011000 	.word	0x40011000

080023c8 <MGPIO_u8GetPinValue>:

            /* ----- Function that get the pin value either "High or Low" ------- */
u8 MGPIO_u8GetPinValue(GPIO_t Copy_GPIO_Pin)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	80b8      	strh	r0, [r7, #4]
    u8 LOC_u8Value = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
    switch (Copy_GPIO_Pin.GPIO_Port)
 80023d4:	797b      	ldrb	r3, [r7, #5]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d00d      	beq.n	80023f6 <MGPIO_u8GetPinValue+0x2e>
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d014      	beq.n	8002408 <MGPIO_u8GetPinValue+0x40>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d000      	beq.n	80023e4 <MGPIO_u8GetPinValue+0x1c>
    {
                    /* Get the pin value from the Input Data Register */
        case GPIOA_Port : LOC_u8Value = GET_BIT(MGPIOA -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
        case GPIOB_Port : LOC_u8Value = GET_BIT(MGPIOB -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
        case GPIOC_Port : LOC_u8Value = GET_BIT(MGPIOC -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
        default    :                                                  break;
 80023e2:	e01a      	b.n	800241a <MGPIO_u8GetPinValue+0x52>
        case GPIOA_Port : LOC_u8Value = GET_BIT(MGPIOA -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MGPIO_u8GetPinValue+0x60>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	793a      	ldrb	r2, [r7, #4]
 80023ea:	40d3      	lsrs	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e011      	b.n	800241a <MGPIO_u8GetPinValue+0x52>
        case GPIOB_Port : LOC_u8Value = GET_BIT(MGPIOB -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <MGPIO_u8GetPinValue+0x64>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	793a      	ldrb	r2, [r7, #4]
 80023fc:	40d3      	lsrs	r3, r2
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e008      	b.n	800241a <MGPIO_u8GetPinValue+0x52>
        case GPIOC_Port : LOC_u8Value = GET_BIT(MGPIOC -> IDR , Copy_GPIO_Pin.GPIO_Pin); break;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MGPIO_u8GetPinValue+0x68>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	793a      	ldrb	r2, [r7, #4]
 800240e:	40d3      	lsrs	r3, r2
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	bf00      	nop
    }
    return LOC_u8Value;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40010800 	.word	0x40010800
 800242c:	40010c00 	.word	0x40010c00
 8002430:	40011000 	.word	0x40011000

08002434 <MNVIC_voidEnableInterrupt>:



/* Enable Peripheral Interrupt through "ISERx Reg" of NVIC */
void MNVIC_voidEnableInterrupt(u8 Copy_u8IntId)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
    MNVIC_Ptr -> ISER [Copy_u8IntId / 32] = 1 << ( Copy_u8IntId % 32);
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	2201      	movs	r2, #1
 8002446:	fa02 f103 	lsl.w	r1, r2, r3
 800244a:	4a05      	ldr	r2, [pc, #20]	; (8002460 <MNVIC_voidEnableInterrupt+0x2c>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100

08002464 <MRCC_enuInitSysClock>:



/* ----- Initialize clock depending on paramters chosen by the user ----- */
tenumFncErrorState MRCC_enuInitSysClock (void)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
	u32 LOC_u32TimeOut = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]

    tenumFncErrorState MRCC_Init_Status = LSTY_EXECUTED_SUCCESSFULLY;
 800246e:	2300      	movs	r3, #0
 8002470:	70fb      	strb	r3, [r7, #3]
		if(LOC_u32TimeOut >= 100000){ /*TimeOut*/ MRCC_Init_Status = LSTY_TIME_OUT; }	

	#elif RCC_SYS_CLOCK == RCC_HSE_CRYSTAL /* HSE not bypassed */
		/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* HSE Selected As A System Clock */
		SET_BIT(MRCC_Ptr -> CFGR, 0);
 8002472:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6053      	str	r3, [r2, #4]
		CLR_BIT(MRCC_Ptr-> CFGR, 1);
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 8002484:	f023 0302 	bic.w	r3, r3, #2
 8002488:	6053      	str	r3, [r2, #4]
		/* Bit 16 -> Enable The HSE Clock */
		SET_BIT(MRCC_Ptr -> CR, 16);
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
		/* Bit 17 -> Checking Whether The HSE Clock Is Stable (1) or not (0) :*/
		while( ( ( GET_BIT(MRCC_Ptr -> CR , 17) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) ){ LOC_u32TimeOut++; }
 8002496:	e002      	b.n	800249e <MRCC_enuInitSysClock+0x3a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3301      	adds	r3, #1
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	0c5b      	lsrs	r3, r3, #17
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <MRCC_enuInitSysClock+0x50>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <MRCC_enuInitSysClock+0x84>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d9f1      	bls.n	8002498 <MRCC_enuInitSysClock+0x34>
		if(LOC_u32TimeOut >= 100000){ /*TimeOut*/ MRCC_Init_Status = LSTY_TIME_OUT; }
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <MRCC_enuInitSysClock+0x84>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <MRCC_enuInitSysClock+0x5c>
 80024bc:	2306      	movs	r3, #6
 80024be:	70fb      	strb	r3, [r7, #3]
	#endif


	/* ----- To enable or disable Clock security system ----- */
	#if CLK_SECURITY_SYSTEM == ENABLE_CLOCK_SECURITY_SYSTEM 
		SET_BIT(MRCC_Ptr -> CR, 19);
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 80024c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024ca:	6013      	str	r3, [r2, #0]
		#error "CSS Configuration error"
	#endif

	/* ----- Choosing output on MCO  Control Register Bits: 26-24 ----- */
	#if   RCC_MCO_PIN == NO_CLOCK 
		CLR_BIT(MRCC_Ptr -> CFGR , 26);  
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <MRCC_enuInitSysClock+0x80>)
 80024d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024d6:	6053      	str	r3, [r2, #4]
		SET_BIT(MRCC_Ptr -> CFGR , 26);
	#else
		#error "Invalid MCO Configuration"
	#endif	

    return MRCC_Init_Status;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40021000 	.word	0x40021000
 80024e8:	0001869f 	.word	0x0001869f

080024ec <MRCC_enuEnableClock>:


tenumFncErrorState MRCC_enuEnableClock (u8 Copy_u8BusId , u8 Copy_u8PerId)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	460a      	mov	r2, r1
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71bb      	strb	r3, [r7, #6]
    tenumFncErrorState MRCC_EnableClock_Status = LSTY_EXECUTED_SUCCESSFULLY;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]

    if (Copy_u8PerId <= 31)
 8002500:	79bb      	ldrb	r3, [r7, #6]
 8002502:	2b1f      	cmp	r3, #31
 8002504:	d82b      	bhi.n	800255e <MRCC_enuEnableClock+0x72>
    {
      switch (Copy_u8BusId) 
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d00e      	beq.n	800252a <MRCC_enuEnableClock+0x3e>
 800250c:	2b02      	cmp	r3, #2
 800250e:	d017      	beq.n	8002540 <MRCC_enuEnableClock+0x54>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d120      	bne.n	8002556 <MRCC_enuEnableClock+0x6a>
      {
        case AHB_BUS  : SET_BIT(MRCC_Ptr -> AHBENR  , Copy_u8PerId ); break;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <MRCC_enuEnableClock+0x84>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	79ba      	ldrb	r2, [r7, #6]
 800251a:	2101      	movs	r1, #1
 800251c:	fa01 f202 	lsl.w	r2, r1, r2
 8002520:	4611      	mov	r1, r2
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <MRCC_enuEnableClock+0x84>)
 8002524:	430b      	orrs	r3, r1
 8002526:	6153      	str	r3, [r2, #20]
 8002528:	e01b      	b.n	8002562 <MRCC_enuEnableClock+0x76>
        case APB1_BUS : SET_BIT(MRCC_Ptr -> APB1ENR , Copy_u8PerId ); break;
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <MRCC_enuEnableClock+0x84>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	79ba      	ldrb	r2, [r7, #6]
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	4611      	mov	r1, r2
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <MRCC_enuEnableClock+0x84>)
 800253a:	430b      	orrs	r3, r1
 800253c:	61d3      	str	r3, [r2, #28]
 800253e:	e010      	b.n	8002562 <MRCC_enuEnableClock+0x76>
        case APB2_BUS : SET_BIT(MRCC_Ptr -> APB2ENR , Copy_u8PerId ); break;
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <MRCC_enuEnableClock+0x84>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	79ba      	ldrb	r2, [r7, #6]
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	4611      	mov	r1, r2
 800254e:	4a08      	ldr	r2, [pc, #32]	; (8002570 <MRCC_enuEnableClock+0x84>)
 8002550:	430b      	orrs	r3, r1
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	e005      	b.n	8002562 <MRCC_enuEnableClock+0x76>
        default       : MRCC_EnableClock_Status = LSTY_OUT_OF_RANGE;  break;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	bf00      	nop
 800255c:	e001      	b.n	8002562 <MRCC_enuEnableClock+0x76>
      }
    }
    else 
    {
        /*Out Of Range*/ 
        MRCC_EnableClock_Status = LSTY_OUT_OF_RANGE;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
    }

    return MRCC_EnableClock_Status;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000

08002574 <MSTK_voidInit>:
static void (*MSTK_Callback) (void) ;

/***********************************************************************************/

void MSTK_voidInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
    /* Select Clock for systick*/
    #if SYSTIC_CLOCK_TYPE == SYSTICK_AHB
        MsysTick->STK_CTRL |=  (1 << CLKSOURCE);
    #elif  SYSTIC_CLOCK_TYPE == SYSTICK_AHB_DIV_8    
        MsysTick->STK_CTRL &=  ~(1 << CLKSOURCE);
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <MSTK_voidInit+0x30>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <MSTK_voidInit+0x30>)
 800257e:	f023 0304 	bic.w	r3, r3, #4
 8002582:	6013      	str	r3, [r2, #0]
	#else 
		#error "Invalid SysTick Configuration error"
    #endif

    /*Disable interrupt for systick*/
    MsysTick->STK_CTRL &=  ~(1 << TICINT);
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <MSTK_voidInit+0x30>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <MSTK_voidInit+0x30>)
 800258a:	f023 0302 	bic.w	r3, r3, #2
 800258e:	6013      	str	r3, [r2, #0]

    /*Disable the systick*/
    MsysTick->STK_CTRL &=  ~(1 << Enable);
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <MSTK_voidInit+0x30>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <MSTK_voidInit+0x30>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <MSTK_voidSetIntervalPeriodic>:

/* Asynchronous function to let the timer start counting and 
   fire an interrupt (it's by default will keep firing the interrupt,
   untill you call stopTimer API) */
void MSTK_voidSetIntervalPeriodic(u32 Copy_u32Ticks , void (*ptr) (void))
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    /*clear old value in value register*/
    MsysTick->STK_VAL = 0;
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <MSTK_voidSetIntervalPeriodic+0x40>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    /*enable the interrupt because it's asynchronous event*/
    MsysTick->STK_CTRL |=  (1 << TICINT);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <MSTK_voidSetIntervalPeriodic+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <MSTK_voidSetIntervalPeriodic+0x40>)
 80025be:	f043 0302 	orr.w	r3, r3, #2
 80025c2:	6013      	str	r3, [r2, #0]
    /*load the required value in load register*/
    MsysTick->STK_LOAD = Copy_u32Ticks;
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <MSTK_voidSetIntervalPeriodic+0x40>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6053      	str	r3, [r2, #4]
    /*Enable systick*/
    MsysTick->STK_CTRL |=  (1 << Enable);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <MSTK_voidSetIntervalPeriodic+0x40>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <MSTK_voidSetIntervalPeriodic+0x40>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6013      	str	r3, [r2, #0]
    /*assign the local function to be executed when interrupt fires to ISR through
     this global pointer to function variable*/
    MSTK_Callback = ptr;
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <MSTK_voidSetIntervalPeriodic+0x44>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010
 80025ec:	20000110 	.word	0x20000110

080025f0 <SysTick_Handler>:
	return (GET_BIT(MsysTick -> STK_CTRL , COUNTFLAG));
}

/*  ISR of Systick, called by hardware*/
void SysTick_Handler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
    /*if assigned to a function by user == not NULL (because NULL is the initiated value)*/
    if(MSTK_Callback != LSTY_NULL)
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Handler+0x18>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <SysTick_Handler+0x12>
    {
        /*start executing the passed function by user*/
        MSTK_Callback();
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <SysTick_Handler+0x18>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4798      	blx	r3
    }
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000110 	.word	0x20000110

0800260c <TIM3_IRQHandler>:
	//disable counter
	TIM4_BASE->TIMx_CR1 &=~(1<<0);
}

void TIM3_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	// clear update flag, to generate another interrupt periodically
	TIM3_BASE->TIMx_SR &=~(1<<0);
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <TIM3_IRQHandler+0x24>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <TIM3_IRQHandler+0x24>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6113      	str	r3, [r2, #16]

    /*if assigned to a function by user == not NULL (because NULL is the initiated value)*/
    if(TIM3_Callback != LSTY_NULL)
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <TIM3_IRQHandler+0x28>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <TIM3_IRQHandler+0x1e>
    {
        /*start executing the passed function by user*/
    	TIM3_Callback();
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <TIM3_IRQHandler+0x28>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4798      	blx	r3
    }
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40000400 	.word	0x40000400
 8002634:	20000114 	.word	0x20000114

08002638 <OS_VoidStart>:
#define NULL 	0

static TASK_TCB OS_Tasks[ TASK_NUMBERS ] = { { NULL } };

void OS_VoidStart( void )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	MSTK_voidInit();
 800263c:	f7ff ff9a 	bl	8002574 <MSTK_voidInit>

	MSTK_voidSetIntervalPeriodic(TICK_TIME, OS_VoidSchedular);
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <OS_VoidStart+0x18>)
 8002642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002646:	f7ff ffaf 	bl	80025a8 <MSTK_voidSetIntervalPeriodic>
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	08002709 	.word	0x08002709

08002654 <OS_VoidCreateTask>:

void OS_VoidCreateTask( u8 Copy_u8Priority , u16 Copy_u16Periodicity , void (*Copy_pvTask)( void ) , u16 Copy_u16FirstDelay ){
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]

	if( OS_Tasks[ Copy_u8Priority ].TaskHandler == NULL ){
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <OS_VoidCreateTask+0x60>)
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4413      	add	r3, r2
 800266c:	3304      	adds	r3, #4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d11a      	bne.n	80026aa <OS_VoidCreateTask+0x56>

		OS_Tasks[ Copy_u8Priority ].u16Periodicity = Copy_u16Periodicity ;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <OS_VoidCreateTask+0x60>)
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	601a      	str	r2, [r3, #0]
		OS_Tasks[ Copy_u8Priority ].TaskHandler = Copy_pvTask         ;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <OS_VoidCreateTask+0x60>)
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
		OS_Tasks[ Copy_u8Priority ].u16FirstDelay  = Copy_u16FirstDelay  ;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <OS_VoidCreateTask+0x60>)
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	4413      	add	r3, r2
 8002696:	3308      	adds	r3, #8
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	601a      	str	r2, [r3, #0]
		OS_Tasks[ Copy_u8Priority ].u8State       = TASK_READY          ;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <OS_VoidCreateTask+0x60>)
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	4413      	add	r3, r2
 80026a4:	330c      	adds	r3, #12
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]

		/* Do No Thing */

	}

}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	20000118 	.word	0x20000118

080026b8 <OS_VoidSuspendTask>:

void OS_VoidSuspendTask ( u8 Copy_u8TaskID ){
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]

	OS_Tasks[ Copy_u8TaskID ].u8State = TASK_SUSPEND ;
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	4a05      	ldr	r2, [pc, #20]	; (80026dc <OS_VoidSuspendTask+0x24>)
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	330c      	adds	r3, #12
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]

}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000118 	.word	0x20000118

080026e0 <OS_VoidResumeTask>:

void OS_VoidResumeTask  ( u8 Copy_u8TaskID ){
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]

	OS_Tasks[ Copy_u8TaskID ].u8State = TASK_READY   ;
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	4a05      	ldr	r2, [pc, #20]	; (8002704 <OS_VoidResumeTask+0x24>)
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4413      	add	r3, r2
 80026f2:	330c      	adds	r3, #12
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]

}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000118 	.word	0x20000118

08002708 <OS_VoidSchedular>:
	OS_Tasks[ Copy_u8TaskID ].TaskHandler = NULL ;

}


void OS_VoidSchedular( void ){
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0

	u8 LOC_u8TaskCounter      ;

	for( LOC_u8TaskCounter = 0 ; LOC_u8TaskCounter < TASK_NUMBERS ; LOC_u8TaskCounter++ ){
 800270e:	2300      	movs	r3, #0
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	e03a      	b.n	800278a <OS_VoidSchedular+0x82>

		if( ( OS_Tasks[ LOC_u8TaskCounter ].TaskHandler != NULL ) && ( OS_Tasks[ LOC_u8TaskCounter ].u8State == TASK_READY ) ){
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	4a20      	ldr	r2, [pc, #128]	; (8002798 <OS_VoidSchedular+0x90>)
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02f      	beq.n	8002784 <OS_VoidSchedular+0x7c>
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <OS_VoidSchedular+0x90>)
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	4413      	add	r3, r2
 800272c:	330c      	adds	r3, #12
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d127      	bne.n	8002784 <OS_VoidSchedular+0x7c>

			if( OS_Tasks[ LOC_u8TaskCounter ].u16FirstDelay == 0 ){
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	4a18      	ldr	r2, [pc, #96]	; (8002798 <OS_VoidSchedular+0x90>)
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	3308      	adds	r3, #8
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d113      	bne.n	800276c <OS_VoidSchedular+0x64>

				OS_Tasks[ LOC_u8TaskCounter ].u16FirstDelay = OS_Tasks[ LOC_u8TaskCounter ].u16Periodicity - 1 ;
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <OS_VoidSchedular+0x90>)
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	3a01      	subs	r2, #1
 8002752:	4911      	ldr	r1, [pc, #68]	; (8002798 <OS_VoidSchedular+0x90>)
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	440b      	add	r3, r1
 8002758:	3308      	adds	r3, #8
 800275a:	601a      	str	r2, [r3, #0]
				OS_Tasks[ LOC_u8TaskCounter ].TaskHandler();
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <OS_VoidSchedular+0x90>)
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4798      	blx	r3
 800276a:	e00b      	b.n	8002784 <OS_VoidSchedular+0x7c>
			}
			else{

				OS_Tasks[ LOC_u8TaskCounter ].u16FirstDelay--;
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <OS_VoidSchedular+0x90>)
 8002770:	011a      	lsls	r2, r3, #4
 8002772:	440a      	add	r2, r1
 8002774:	3208      	adds	r2, #8
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	3a01      	subs	r2, #1
 800277a:	4907      	ldr	r1, [pc, #28]	; (8002798 <OS_VoidSchedular+0x90>)
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	440b      	add	r3, r1
 8002780:	3308      	adds	r3, #8
 8002782:	601a      	str	r2, [r3, #0]
	for( LOC_u8TaskCounter = 0 ; LOC_u8TaskCounter < TASK_NUMBERS ; LOC_u8TaskCounter++ ){
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	3301      	adds	r3, #1
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2b0a      	cmp	r3, #10
 800278e:	d9c1      	bls.n	8002714 <OS_VoidSchedular+0xc>

		}

	}

}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000118 	.word	0x20000118

0800279c <main>:
#include "include.h"

int main(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	/********************************************Clock initialization****************************************/
 	MRCC_enuInitSysClock();
 80027a0:	f7ff fe60 	bl	8002464 <MRCC_enuInitSysClock>
	MRCC_enuEnableClock (APB2_BUS , GPIOA_RCC);
 80027a4:	2102      	movs	r1, #2
 80027a6:	2002      	movs	r0, #2
 80027a8:	f7ff fea0 	bl	80024ec <MRCC_enuEnableClock>
	MRCC_enuEnableClock (APB2_BUS , GPIOB_RCC);
 80027ac:	2103      	movs	r1, #3
 80027ae:	2002      	movs	r0, #2
 80027b0:	f7ff fe9c 	bl	80024ec <MRCC_enuEnableClock>
	MRCC_enuEnableClock (APB1_BUS , TIM4_RCC);
 80027b4:	2102      	movs	r1, #2
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7ff fe98 	bl	80024ec <MRCC_enuEnableClock>
	MRCC_enuEnableClock (APB1_BUS , TIM3_RCC);
 80027bc:	2101      	movs	r1, #1
 80027be:	2001      	movs	r0, #1
 80027c0:	f7ff fe94 	bl	80024ec <MRCC_enuEnableClock>
	MRCC_enuEnableClock (APB2_BUS, AFIO_RCC);
 80027c4:	2100      	movs	r1, #0
 80027c6:	2002      	movs	r0, #2
 80027c8:	f7ff fe90 	bl	80024ec <MRCC_enuEnableClock>

	/*********************************************Application initialization*********************************/
	DispalyModule_voidInit();
 80027cc:	f7fe fa2c 	bl	8000c28 <DispalyModule_voidInit>
	InputModule_voidInit();
 80027d0:	f7fe fc1a 	bl	8001008 <InputModule_voidInit>
	ControlModule_voidInit();
 80027d4:	f7fd fccc 	bl	8000170 <ControlModule_voidInit>
	StatusModule_voidInit();
 80027d8:	f7fe fe0c 	bl	80013f4 <StatusModule_voidInit>

	/**************************************************Start Scheduler***************************************/
	OS_VoidStart();
 80027dc:	f7ff ff2c 	bl	8002638 <OS_VoidStart>
	return 0;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027e8:	480d      	ldr	r0, [pc, #52]	; (8002820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ea:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f0:	480c      	ldr	r0, [pc, #48]	; (8002824 <LoopForever+0x6>)
  ldr r1, =_edata
 80027f2:	490d      	ldr	r1, [pc, #52]	; (8002828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <LoopForever+0xe>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f8:	e002      	b.n	8002800 <LoopCopyDataInit>

080027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fe:	3304      	adds	r3, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002804:	d3f9      	bcc.n	80027fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002808:	4c0a      	ldr	r4, [pc, #40]	; (8002834 <LoopForever+0x16>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800280c:	e001      	b.n	8002812 <LoopFillZerobss>

0800280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002810:	3204      	adds	r2, #4

08002812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002814:	d3fb      	bcc.n	800280e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002816:	f000 f811 	bl	800283c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800281a:	f7ff ffbf 	bl	800279c <main>

0800281e <LoopForever>:

LoopForever:
    b LoopForever
 800281e:	e7fe      	b.n	800281e <LoopForever>
  ldr   r0, =_estack
 8002820:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002828:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800282c:	080028c0 	.word	0x080028c0
  ldr r2, =_sbss
 8002830:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002834:	200001c8 	.word	0x200001c8

08002838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <ADC1_2_IRQHandler>
	...

0800283c <__libc_init_array>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	2500      	movs	r5, #0
 8002840:	4e0c      	ldr	r6, [pc, #48]	; (8002874 <__libc_init_array+0x38>)
 8002842:	4c0d      	ldr	r4, [pc, #52]	; (8002878 <__libc_init_array+0x3c>)
 8002844:	1ba4      	subs	r4, r4, r6
 8002846:	10a4      	asrs	r4, r4, #2
 8002848:	42a5      	cmp	r5, r4
 800284a:	d109      	bne.n	8002860 <__libc_init_array+0x24>
 800284c:	f000 f81a 	bl	8002884 <_init>
 8002850:	2500      	movs	r5, #0
 8002852:	4e0a      	ldr	r6, [pc, #40]	; (800287c <__libc_init_array+0x40>)
 8002854:	4c0a      	ldr	r4, [pc, #40]	; (8002880 <__libc_init_array+0x44>)
 8002856:	1ba4      	subs	r4, r4, r6
 8002858:	10a4      	asrs	r4, r4, #2
 800285a:	42a5      	cmp	r5, r4
 800285c:	d105      	bne.n	800286a <__libc_init_array+0x2e>
 800285e:	bd70      	pop	{r4, r5, r6, pc}
 8002860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002864:	4798      	blx	r3
 8002866:	3501      	adds	r5, #1
 8002868:	e7ee      	b.n	8002848 <__libc_init_array+0xc>
 800286a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800286e:	4798      	blx	r3
 8002870:	3501      	adds	r5, #1
 8002872:	e7f2      	b.n	800285a <__libc_init_array+0x1e>
 8002874:	080028b8 	.word	0x080028b8
 8002878:	080028b8 	.word	0x080028b8
 800287c:	080028b8 	.word	0x080028b8
 8002880:	080028bc 	.word	0x080028bc

08002884 <_init>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	bf00      	nop
 8002888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288a:	bc08      	pop	{r3}
 800288c:	469e      	mov	lr, r3
 800288e:	4770      	bx	lr

08002890 <_fini>:
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002892:	bf00      	nop
 8002894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002896:	bc08      	pop	{r3}
 8002898:	469e      	mov	lr, r3
 800289a:	4770      	bx	lr
